// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="AirLight_AirLight,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.948083,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=4206,HLS_SYN_LUT=5035,HLS_VERSION=2020_2}" *)

module AirLight (
        ap_clk,
        ap_rst_n,
        src_TDATA,
        src_TVALID,
        src_TREADY,
        src_TKEEP,
        src_TSTRB,
        src_TUSER,
        src_TLAST,
        src_TID,
        src_TDEST,
        B_A,
        B_A_ap_vld,
        G_A,
        G_A_ap_vld,
        R_A,
        R_A_ap_vld,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 154'd1;
parameter    ap_ST_fsm_state2 = 154'd2;
parameter    ap_ST_fsm_state3 = 154'd4;
parameter    ap_ST_fsm_state4 = 154'd8;
parameter    ap_ST_fsm_state5 = 154'd16;
parameter    ap_ST_fsm_state6 = 154'd32;
parameter    ap_ST_fsm_state7 = 154'd64;
parameter    ap_ST_fsm_pp3_stage0 = 154'd128;
parameter    ap_ST_fsm_pp3_stage1 = 154'd256;
parameter    ap_ST_fsm_pp3_stage2 = 154'd512;
parameter    ap_ST_fsm_state13 = 154'd1024;
parameter    ap_ST_fsm_state14 = 154'd2048;
parameter    ap_ST_fsm_state15 = 154'd4096;
parameter    ap_ST_fsm_state16 = 154'd8192;
parameter    ap_ST_fsm_state17 = 154'd16384;
parameter    ap_ST_fsm_state18 = 154'd32768;
parameter    ap_ST_fsm_state19 = 154'd65536;
parameter    ap_ST_fsm_state20 = 154'd131072;
parameter    ap_ST_fsm_state21 = 154'd262144;
parameter    ap_ST_fsm_state22 = 154'd524288;
parameter    ap_ST_fsm_state23 = 154'd1048576;
parameter    ap_ST_fsm_state24 = 154'd2097152;
parameter    ap_ST_fsm_state25 = 154'd4194304;
parameter    ap_ST_fsm_state26 = 154'd8388608;
parameter    ap_ST_fsm_state27 = 154'd16777216;
parameter    ap_ST_fsm_state28 = 154'd33554432;
parameter    ap_ST_fsm_state29 = 154'd67108864;
parameter    ap_ST_fsm_state30 = 154'd134217728;
parameter    ap_ST_fsm_state31 = 154'd268435456;
parameter    ap_ST_fsm_pp5_stage0 = 154'd536870912;
parameter    ap_ST_fsm_state37 = 154'd1073741824;
parameter    ap_ST_fsm_state38 = 154'd2147483648;
parameter    ap_ST_fsm_state39 = 154'd4294967296;
parameter    ap_ST_fsm_state40 = 154'd8589934592;
parameter    ap_ST_fsm_state41 = 154'd17179869184;
parameter    ap_ST_fsm_state42 = 154'd34359738368;
parameter    ap_ST_fsm_state43 = 154'd68719476736;
parameter    ap_ST_fsm_state44 = 154'd137438953472;
parameter    ap_ST_fsm_state45 = 154'd274877906944;
parameter    ap_ST_fsm_state46 = 154'd549755813888;
parameter    ap_ST_fsm_state47 = 154'd1099511627776;
parameter    ap_ST_fsm_state48 = 154'd2199023255552;
parameter    ap_ST_fsm_state49 = 154'd4398046511104;
parameter    ap_ST_fsm_state50 = 154'd8796093022208;
parameter    ap_ST_fsm_state51 = 154'd17592186044416;
parameter    ap_ST_fsm_state52 = 154'd35184372088832;
parameter    ap_ST_fsm_state53 = 154'd70368744177664;
parameter    ap_ST_fsm_state54 = 154'd140737488355328;
parameter    ap_ST_fsm_state55 = 154'd281474976710656;
parameter    ap_ST_fsm_state56 = 154'd562949953421312;
parameter    ap_ST_fsm_state57 = 154'd1125899906842624;
parameter    ap_ST_fsm_state58 = 154'd2251799813685248;
parameter    ap_ST_fsm_state59 = 154'd4503599627370496;
parameter    ap_ST_fsm_state60 = 154'd9007199254740992;
parameter    ap_ST_fsm_state61 = 154'd18014398509481984;
parameter    ap_ST_fsm_state62 = 154'd36028797018963968;
parameter    ap_ST_fsm_state63 = 154'd72057594037927936;
parameter    ap_ST_fsm_state64 = 154'd144115188075855872;
parameter    ap_ST_fsm_state65 = 154'd288230376151711744;
parameter    ap_ST_fsm_state66 = 154'd576460752303423488;
parameter    ap_ST_fsm_state67 = 154'd1152921504606846976;
parameter    ap_ST_fsm_state68 = 154'd2305843009213693952;
parameter    ap_ST_fsm_state69 = 154'd4611686018427387904;
parameter    ap_ST_fsm_state70 = 154'd9223372036854775808;
parameter    ap_ST_fsm_state71 = 154'd18446744073709551616;
parameter    ap_ST_fsm_state72 = 154'd36893488147419103232;
parameter    ap_ST_fsm_state73 = 154'd73786976294838206464;
parameter    ap_ST_fsm_state74 = 154'd147573952589676412928;
parameter    ap_ST_fsm_state75 = 154'd295147905179352825856;
parameter    ap_ST_fsm_state76 = 154'd590295810358705651712;
parameter    ap_ST_fsm_state77 = 154'd1180591620717411303424;
parameter    ap_ST_fsm_state78 = 154'd2361183241434822606848;
parameter    ap_ST_fsm_pp7_stage0 = 154'd4722366482869645213696;
parameter    ap_ST_fsm_state84 = 154'd9444732965739290427392;
parameter    ap_ST_fsm_state85 = 154'd18889465931478580854784;
parameter    ap_ST_fsm_state86 = 154'd37778931862957161709568;
parameter    ap_ST_fsm_state87 = 154'd75557863725914323419136;
parameter    ap_ST_fsm_state88 = 154'd151115727451828646838272;
parameter    ap_ST_fsm_state89 = 154'd302231454903657293676544;
parameter    ap_ST_fsm_state90 = 154'd604462909807314587353088;
parameter    ap_ST_fsm_state91 = 154'd1208925819614629174706176;
parameter    ap_ST_fsm_state92 = 154'd2417851639229258349412352;
parameter    ap_ST_fsm_state93 = 154'd4835703278458516698824704;
parameter    ap_ST_fsm_state94 = 154'd9671406556917033397649408;
parameter    ap_ST_fsm_state95 = 154'd19342813113834066795298816;
parameter    ap_ST_fsm_state96 = 154'd38685626227668133590597632;
parameter    ap_ST_fsm_state97 = 154'd77371252455336267181195264;
parameter    ap_ST_fsm_state98 = 154'd154742504910672534362390528;
parameter    ap_ST_fsm_state99 = 154'd309485009821345068724781056;
parameter    ap_ST_fsm_state100 = 154'd618970019642690137449562112;
parameter    ap_ST_fsm_state101 = 154'd1237940039285380274899124224;
parameter    ap_ST_fsm_state102 = 154'd2475880078570760549798248448;
parameter    ap_ST_fsm_state103 = 154'd4951760157141521099596496896;
parameter    ap_ST_fsm_state104 = 154'd9903520314283042199192993792;
parameter    ap_ST_fsm_state105 = 154'd19807040628566084398385987584;
parameter    ap_ST_fsm_state106 = 154'd39614081257132168796771975168;
parameter    ap_ST_fsm_state107 = 154'd79228162514264337593543950336;
parameter    ap_ST_fsm_state108 = 154'd158456325028528675187087900672;
parameter    ap_ST_fsm_state109 = 154'd316912650057057350374175801344;
parameter    ap_ST_fsm_state110 = 154'd633825300114114700748351602688;
parameter    ap_ST_fsm_state111 = 154'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state112 = 154'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state113 = 154'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state114 = 154'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state115 = 154'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state116 = 154'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state117 = 154'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state118 = 154'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state119 = 154'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state120 = 154'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state121 = 154'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state122 = 154'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state123 = 154'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state124 = 154'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state125 = 154'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_pp9_stage0 = 154'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state131 = 154'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state132 = 154'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state133 = 154'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state134 = 154'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state135 = 154'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state136 = 154'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state137 = 154'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state138 = 154'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state139 = 154'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state140 = 154'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state141 = 154'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state142 = 154'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state143 = 154'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state144 = 154'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state145 = 154'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state146 = 154'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state147 = 154'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state148 = 154'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state149 = 154'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state150 = 154'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state151 = 154'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state152 = 154'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state153 = 154'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state154 = 154'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state155 = 154'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state156 = 154'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state157 = 154'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state158 = 154'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state159 = 154'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state160 = 154'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state161 = 154'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state162 = 154'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state163 = 154'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state164 = 154'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state165 = 154'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state166 = 154'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state167 = 154'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state168 = 154'd11417981541647679048466287755595961091061972992;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] src_TDATA;
input   src_TVALID;
output   src_TREADY;
input  [0:0] src_TKEEP;
input  [0:0] src_TSTRB;
input  [0:0] src_TUSER;
input  [0:0] src_TLAST;
input  [0:0] src_TID;
input  [0:0] src_TDEST;
output  [31:0] B_A;
output   B_A_ap_vld;
output  [31:0] G_A;
output   G_A_ap_vld;
output  [31:0] R_A;
output   R_A_ap_vld;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [153:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] B_A_1_data_reg;
reg    B_A_1_vld_reg;
reg    B_A_1_vld_in;
reg    B_A_1_ack_in;
reg   [31:0] G_A_1_data_reg;
reg    G_A_1_vld_reg;
reg    G_A_1_vld_in;
reg    G_A_1_ack_in;
reg   [31:0] R_A_1_data_reg;
reg    R_A_1_vld_reg;
reg    R_A_1_vld_in;
reg    R_A_1_ack_in;
reg    src_TDATA_blk_n;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage0;
wire    ap_CS_fsm_pp3_stage1;
wire    ap_block_pp3_stage1;
wire    ap_CS_fsm_pp3_stage2;
wire    ap_block_pp3_stage2;
reg   [31:0] size_reg_342;
reg   [63:0] j_1_reg_377;
reg   [31:0] totalB_w_reg_387;
reg   [63:0] j_3_reg_423;
reg   [31:0] totalG_w_reg_433;
reg   [63:0] j_5_reg_469;
reg   [31:0] totalR_w_reg_479;
wire   [8:0] empty_47_fu_503_p2;
wire    ap_CS_fsm_state2;
wire   [8:0] empty_50_fu_520_p2;
wire    ap_CS_fsm_state4;
wire   [8:0] empty_53_fu_537_p2;
wire    ap_CS_fsm_state6;
reg   [7:0] dictB_addr_1_reg_1117;
reg    ap_block_state8_pp3_stage0_iter0;
wire    ap_block_state11_pp3_stage0_iter1;
reg    ap_block_pp3_stage0_11001;
wire   [0:0] addr_cmp43_fu_592_p2;
reg   [0:0] addr_cmp43_reg_1122;
wire   [31:0] add_ln20_fu_613_p2;
reg   [31:0] add_ln20_reg_1127;
reg    ap_block_state9_pp3_stage1_iter0;
wire    ap_block_state12_pp3_stage1_iter1;
reg    ap_block_pp3_stage1_11001;
reg   [7:0] dictG_addr_1_reg_1133;
wire   [0:0] addr_cmp37_fu_627_p2;
reg   [0:0] addr_cmp37_reg_1138;
wire   [31:0] add_ln22_fu_652_p2;
reg   [31:0] add_ln22_reg_1143;
reg    ap_block_state10_pp3_stage2_iter0;
reg    ap_block_pp3_stage2_11001;
wire   [0:0] pixIn_last_V_fu_658_p1;
reg   [0:0] pixIn_last_V_reg_1149;
reg   [7:0] dictR_addr_1_reg_1153;
wire   [0:0] addr_cmp_fu_670_p2;
reg   [0:0] addr_cmp_reg_1158;
wire   [31:0] add_ln24_fu_695_p2;
reg   [31:0] add_ln24_reg_1163;
wire   [31:0] size_1_fu_701_p2;
reg   [31:0] size_1_reg_1169;
reg    ap_enable_reg_pp3_iter1;
wire   [63:0] grp_fu_496_p1;
reg   [63:0] conv_reg_1175;
wire    ap_CS_fsm_state18;
wire   [63:0] grp_fu_491_p2;
reg   [63:0] dc_reg_1180;
wire    ap_CS_fsm_state25;
reg   [0:0] p_Result_s_reg_1185;
wire    ap_CS_fsm_state26;
wire   [31:0] val_fu_828_p3;
reg   [31:0] val_reg_1190;
wire   [31:0] result_V_fu_841_p3;
reg   [31:0] result_V_reg_1196;
wire    ap_CS_fsm_state27;
reg   [0:0] tmp_2_reg_1203;
wire    ap_CS_fsm_state28;
wire   [31:0] totalB_1_fu_860_p2;
reg   [31:0] totalB_1_reg_1212;
wire    ap_CS_fsm_state29;
wire   [8:0] add_ln29_fu_870_p2;
wire    ap_CS_fsm_state30;
wire   [0:0] icmp_ln33_fu_866_p2;
wire   [63:0] zext_ln34_fu_880_p1;
wire    ap_CS_fsm_state31;
wire   [0:0] icmp_ln34_fu_884_p2;
reg   [0:0] icmp_ln34_reg_1232;
wire    ap_CS_fsm_pp5_stage0;
wire    ap_block_state32_pp5_stage0_iter0;
wire    ap_block_state33_pp5_stage0_iter1;
wire    ap_block_state34_pp5_stage0_iter2;
wire    ap_block_state35_pp5_stage0_iter3;
wire    ap_block_state36_pp5_stage0_iter4;
wire    ap_block_pp5_stage0_11001;
reg   [0:0] icmp_ln34_reg_1232_pp5_iter1_reg;
reg   [0:0] icmp_ln34_reg_1232_pp5_iter2_reg;
reg   [0:0] icmp_ln34_reg_1232_pp5_iter3_reg;
wire  signed [31:0] trunc_ln35_fu_890_p1;
reg  signed [31:0] trunc_ln35_reg_1241;
reg  signed [31:0] trunc_ln35_reg_1241_pp5_iter1_reg;
wire   [63:0] add_ln34_fu_894_p2;
reg    ap_enable_reg_pp5_iter0;
wire   [31:0] dictB_q0;
reg  signed [31:0] dictB_load_2_reg_1251;
reg    ap_enable_reg_pp5_iter1;
wire   [31:0] grp_fu_900_p2;
reg   [31:0] mul_ln35_reg_1256;
wire   [31:0] totalB_w_1_fu_904_p2;
reg    ap_enable_reg_pp5_iter4;
wire   [31:0] grp_fu_909_p2;
wire    ap_CS_fsm_state72;
reg   [0:0] tmp_3_reg_1271;
wire    ap_CS_fsm_state75;
wire   [31:0] totalG_1_fu_928_p2;
reg   [31:0] totalG_1_reg_1280;
wire    ap_CS_fsm_state76;
wire   [8:0] add_ln40_fu_938_p2;
wire    ap_CS_fsm_state77;
wire   [0:0] icmp_ln44_fu_934_p2;
wire   [63:0] zext_ln45_fu_948_p1;
wire    ap_CS_fsm_state78;
wire   [0:0] icmp_ln45_fu_952_p2;
reg   [0:0] icmp_ln45_reg_1300;
wire    ap_CS_fsm_pp7_stage0;
wire    ap_block_state79_pp7_stage0_iter0;
wire    ap_block_state80_pp7_stage0_iter1;
wire    ap_block_state81_pp7_stage0_iter2;
wire    ap_block_state82_pp7_stage0_iter3;
wire    ap_block_state83_pp7_stage0_iter4;
wire    ap_block_pp7_stage0_11001;
reg   [0:0] icmp_ln45_reg_1300_pp7_iter1_reg;
reg   [0:0] icmp_ln45_reg_1300_pp7_iter2_reg;
reg   [0:0] icmp_ln45_reg_1300_pp7_iter3_reg;
wire  signed [31:0] trunc_ln46_fu_958_p1;
reg  signed [31:0] trunc_ln46_reg_1309;
reg  signed [31:0] trunc_ln46_reg_1309_pp7_iter1_reg;
wire   [63:0] add_ln45_fu_962_p2;
reg    ap_enable_reg_pp7_iter0;
wire   [31:0] dictG_q0;
reg  signed [31:0] dictG_load_2_reg_1319;
reg    ap_enable_reg_pp7_iter1;
wire   [31:0] grp_fu_968_p2;
reg   [31:0] mul_ln46_reg_1324;
wire   [31:0] totalG_w_1_fu_972_p2;
reg    ap_enable_reg_pp7_iter4;
wire   [31:0] grp_fu_977_p2;
wire    ap_CS_fsm_state119;
reg   [0:0] tmp_4_reg_1339;
wire    ap_CS_fsm_state122;
wire   [31:0] totalR_1_fu_996_p2;
reg   [31:0] totalR_1_reg_1348;
wire    ap_CS_fsm_state123;
wire   [8:0] add_ln51_fu_1006_p2;
wire    ap_CS_fsm_state124;
wire   [0:0] icmp_ln55_fu_1002_p2;
wire   [63:0] zext_ln56_fu_1016_p1;
wire    ap_CS_fsm_state125;
wire   [0:0] icmp_ln56_fu_1020_p2;
reg   [0:0] icmp_ln56_reg_1368;
wire    ap_CS_fsm_pp9_stage0;
wire    ap_block_state126_pp9_stage0_iter0;
wire    ap_block_state127_pp9_stage0_iter1;
wire    ap_block_state128_pp9_stage0_iter2;
wire    ap_block_state129_pp9_stage0_iter3;
wire    ap_block_state130_pp9_stage0_iter4;
wire    ap_block_pp9_stage0_11001;
reg   [0:0] icmp_ln56_reg_1368_pp9_iter1_reg;
reg   [0:0] icmp_ln56_reg_1368_pp9_iter2_reg;
reg   [0:0] icmp_ln56_reg_1368_pp9_iter3_reg;
wire  signed [31:0] trunc_ln57_fu_1026_p1;
reg  signed [31:0] trunc_ln57_reg_1377;
reg  signed [31:0] trunc_ln57_reg_1377_pp9_iter1_reg;
wire   [63:0] add_ln56_fu_1030_p2;
reg    ap_enable_reg_pp9_iter0;
wire   [31:0] dictR_q0;
reg  signed [31:0] dictR_load_2_reg_1387;
reg    ap_enable_reg_pp9_iter1;
wire   [31:0] grp_fu_1036_p2;
reg   [31:0] mul_ln57_reg_1392;
wire   [31:0] totalR_w_1_fu_1040_p2;
reg    ap_enable_reg_pp9_iter4;
wire   [31:0] grp_fu_1045_p2;
wire    ap_CS_fsm_state166;
wire    ap_CS_fsm_state7;
reg    ap_block_pp3_stage2_subdone;
reg    ap_condition_pp3_flush_enable;
reg    ap_block_pp3_stage1_subdone;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state32;
reg    ap_enable_reg_pp5_iter2;
reg    ap_enable_reg_pp5_iter3;
wire    ap_block_pp7_stage0_subdone;
reg    ap_condition_pp7_exit_iter0_state79;
reg    ap_enable_reg_pp7_iter2;
reg    ap_enable_reg_pp7_iter3;
wire    ap_block_pp9_stage0_subdone;
reg    ap_condition_pp9_exit_iter0_state126;
reg    ap_enable_reg_pp9_iter2;
reg    ap_enable_reg_pp9_iter3;
reg   [7:0] dictB_address0;
reg    dictB_ce0;
reg    dictB_we0;
reg   [31:0] dictB_d0;
reg   [7:0] dictG_address0;
reg    dictG_ce0;
reg    dictG_we0;
reg   [31:0] dictG_d0;
reg   [7:0] dictR_address0;
reg    dictR_ce0;
reg    dictR_we0;
reg   [31:0] dictR_d0;
reg   [8:0] empty_reg_309;
wire   [0:0] exitcond16327_fu_509_p2;
reg   [8:0] empty_49_reg_320;
wire   [0:0] exitcond16226_fu_526_p2;
wire    ap_CS_fsm_state3;
reg   [8:0] empty_52_reg_331;
wire   [0:0] exitcond16125_fu_543_p2;
wire    ap_CS_fsm_state5;
reg   [8:0] i_reg_353;
reg   [31:0] totalB_reg_365;
reg   [8:0] i_1_reg_399;
wire    ap_CS_fsm_state73;
reg   [31:0] totalG_reg_411;
reg   [8:0] i_2_reg_445;
wire    ap_CS_fsm_state120;
reg   [31:0] totalR_reg_457;
wire   [63:0] p_cast_fu_515_p1;
wire   [63:0] p_cast1_fu_532_p1;
wire   [63:0] p_cast2_fu_549_p1;
wire   [63:0] zext_ln534_fu_584_p1;
wire   [63:0] zext_ln534_1_fu_619_p1;
wire   [63:0] zext_ln534_2_fu_662_p1;
wire   [63:0] zext_ln29_fu_855_p1;
wire    ap_block_pp5_stage0;
wire   [63:0] zext_ln40_fu_923_p1;
wire    ap_block_pp7_stage0;
wire   [63:0] zext_ln51_fu_991_p1;
wire    ap_block_pp9_stage0;
reg   [63:0] reuse_addr_reg40_fu_132;
reg   [31:0] reuse_reg39_fu_136;
reg   [63:0] reuse_addr_reg34_fu_140;
reg   [31:0] reuse_reg33_fu_144;
reg   [63:0] reuse_addr_reg_fu_148;
reg   [31:0] reuse_reg_fu_152;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state13;
wire   [31:0] reuse_select44_fu_606_p3;
wire   [31:0] reuse_select38_fu_645_p3;
wire   [31:0] reuse_select_fu_688_p3;
wire   [63:0] data_V_fu_711_p1;
wire   [51:0] tmp_6_fu_732_p1;
wire   [53:0] mantissa_fu_736_p4;
wire   [10:0] tmp_5_fu_722_p4;
wire   [11:0] zext_ln510_fu_750_p1;
wire   [11:0] add_ln510_fu_754_p2;
wire   [10:0] sub_ln1311_fu_768_p2;
wire   [0:0] isNeg_fu_760_p3;
wire  signed [11:0] sext_ln1311_fu_774_p1;
wire   [11:0] ush_fu_778_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_786_p1;
wire   [136:0] zext_ln15_fu_746_p1;
wire   [136:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_790_p1;
wire   [136:0] r_V_fu_794_p2;
wire   [0:0] tmp_fu_806_p3;
wire   [136:0] r_V_1_fu_800_p2;
wire   [31:0] zext_ln662_fu_814_p1;
wire   [31:0] tmp_1_fu_818_p4;
wire   [31:0] result_V_2_fu_836_p2;
wire   [7:0] trunc_ln34_fu_876_p1;
wire    ap_CS_fsm_state37;
wire   [7:0] trunc_ln45_fu_944_p1;
wire    ap_CS_fsm_state84;
wire   [7:0] trunc_ln56_fu_1012_p1;
wire    ap_CS_fsm_state131;
reg    grp_fu_909_ap_start;
wire    grp_fu_909_ap_done;
reg    grp_fu_977_ap_start;
wire    grp_fu_977_ap_done;
reg    grp_fu_1045_ap_start;
wire    grp_fu_1045_ap_done;
wire    ap_CS_fsm_state167;
reg    ap_block_state167;
reg   [153:0] ap_NS_fsm;
reg    ap_block_pp3_stage0_subdone;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp7;
wire    ap_enable_pp7;
reg    ap_idle_pp9;
wire    ap_enable_pp9;
wire    regslice_both_src_V_data_V_U_apdone_blk;
wire   [7:0] src_TDATA_int_regslice;
wire    src_TVALID_int_regslice;
reg    src_TREADY_int_regslice;
wire    regslice_both_src_V_data_V_U_ack_in;
wire    regslice_both_src_V_keep_V_U_apdone_blk;
wire   [0:0] src_TKEEP_int_regslice;
wire    regslice_both_src_V_keep_V_U_vld_out;
wire    regslice_both_src_V_keep_V_U_ack_in;
wire    regslice_both_src_V_strb_V_U_apdone_blk;
wire   [0:0] src_TSTRB_int_regslice;
wire    regslice_both_src_V_strb_V_U_vld_out;
wire    regslice_both_src_V_strb_V_U_ack_in;
wire    regslice_both_src_V_user_V_U_apdone_blk;
wire   [0:0] src_TUSER_int_regslice;
wire    regslice_both_src_V_user_V_U_vld_out;
wire    regslice_both_src_V_user_V_U_ack_in;
wire    regslice_both_src_V_last_V_U_apdone_blk;
wire   [0:0] src_TLAST_int_regslice;
wire    regslice_both_src_V_last_V_U_vld_out;
wire    regslice_both_src_V_last_V_U_ack_in;
wire    regslice_both_src_V_id_V_U_apdone_blk;
wire   [0:0] src_TID_int_regslice;
wire    regslice_both_src_V_id_V_U_vld_out;
wire    regslice_both_src_V_id_V_U_ack_in;
wire    regslice_both_src_V_dest_V_U_apdone_blk;
wire   [0:0] src_TDEST_int_regslice;
wire    regslice_both_src_V_dest_V_U_vld_out;
wire    regslice_both_src_V_dest_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 154'd1;
#0 B_A_1_data_reg = 32'd0;
#0 B_A_1_vld_reg = 1'b0;
#0 G_A_1_data_reg = 32'd0;
#0 G_A_1_vld_reg = 1'b0;
#0 R_A_1_data_reg = 32'd0;
#0 R_A_1_vld_reg = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter4 = 1'b0;
#0 ap_enable_reg_pp7_iter0 = 1'b0;
#0 ap_enable_reg_pp7_iter1 = 1'b0;
#0 ap_enable_reg_pp7_iter4 = 1'b0;
#0 ap_enable_reg_pp9_iter0 = 1'b0;
#0 ap_enable_reg_pp9_iter1 = 1'b0;
#0 ap_enable_reg_pp9_iter4 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter3 = 1'b0;
#0 ap_enable_reg_pp7_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter3 = 1'b0;
#0 ap_enable_reg_pp9_iter2 = 1'b0;
#0 ap_enable_reg_pp9_iter3 = 1'b0;
end

AirLight_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

AirLight_dictB #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
dictB_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dictB_address0),
    .ce0(dictB_ce0),
    .we0(dictB_we0),
    .d0(dictB_d0),
    .q0(dictB_q0)
);

AirLight_dictB #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
dictG_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dictG_address0),
    .ce0(dictG_ce0),
    .we0(dictG_we0),
    .d0(dictG_d0),
    .q0(dictG_q0)
);

AirLight_dictB #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
dictR_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dictR_address0),
    .ce0(dictR_ce0),
    .we0(dictR_we0),
    .d0(dictR_d0),
    .q0(dictR_q0)
);

AirLight_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(conv_reg_1175),
    .din1(64'd4587366580439587226),
    .ce(1'b1),
    .dout(grp_fu_491_p2)
);

AirLight_sitodp_32ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_6_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(size_1_reg_1169),
    .ce(1'b1),
    .dout(grp_fu_496_p1)
);

AirLight_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(dictB_load_2_reg_1251),
    .din1(trunc_ln35_reg_1241_pp5_iter1_reg),
    .ce(1'b1),
    .dout(grp_fu_900_p2)
);

AirLight_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_909_ap_start),
    .done(grp_fu_909_ap_done),
    .din0(totalB_w_reg_387),
    .din1(totalB_1_reg_1212),
    .ce(1'b1),
    .dout(grp_fu_909_p2)
);

AirLight_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(dictG_load_2_reg_1319),
    .din1(trunc_ln46_reg_1309_pp7_iter1_reg),
    .ce(1'b1),
    .dout(grp_fu_968_p2)
);

AirLight_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_977_ap_start),
    .done(grp_fu_977_ap_done),
    .din0(totalG_w_reg_433),
    .din1(totalG_1_reg_1280),
    .ce(1'b1),
    .dout(grp_fu_977_p2)
);

AirLight_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(dictR_load_2_reg_1387),
    .din1(trunc_ln57_reg_1377_pp9_iter1_reg),
    .ce(1'b1),
    .dout(grp_fu_1036_p2)
);

AirLight_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1045_ap_start),
    .done(grp_fu_1045_ap_done),
    .din0(totalR_w_reg_479),
    .din1(totalR_1_reg_1348),
    .ce(1'b1),
    .dout(grp_fu_1045_p2)
);

AirLight_regslice_both #(
    .DataWidth( 8 ))
regslice_both_src_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(src_TDATA),
    .vld_in(src_TVALID),
    .ack_in(regslice_both_src_V_data_V_U_ack_in),
    .data_out(src_TDATA_int_regslice),
    .vld_out(src_TVALID_int_regslice),
    .ack_out(src_TREADY_int_regslice),
    .apdone_blk(regslice_both_src_V_data_V_U_apdone_blk)
);

AirLight_regslice_both #(
    .DataWidth( 1 ))
regslice_both_src_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(src_TKEEP),
    .vld_in(src_TVALID),
    .ack_in(regslice_both_src_V_keep_V_U_ack_in),
    .data_out(src_TKEEP_int_regslice),
    .vld_out(regslice_both_src_V_keep_V_U_vld_out),
    .ack_out(src_TREADY_int_regslice),
    .apdone_blk(regslice_both_src_V_keep_V_U_apdone_blk)
);

AirLight_regslice_both #(
    .DataWidth( 1 ))
regslice_both_src_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(src_TSTRB),
    .vld_in(src_TVALID),
    .ack_in(regslice_both_src_V_strb_V_U_ack_in),
    .data_out(src_TSTRB_int_regslice),
    .vld_out(regslice_both_src_V_strb_V_U_vld_out),
    .ack_out(src_TREADY_int_regslice),
    .apdone_blk(regslice_both_src_V_strb_V_U_apdone_blk)
);

AirLight_regslice_both #(
    .DataWidth( 1 ))
regslice_both_src_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(src_TUSER),
    .vld_in(src_TVALID),
    .ack_in(regslice_both_src_V_user_V_U_ack_in),
    .data_out(src_TUSER_int_regslice),
    .vld_out(regslice_both_src_V_user_V_U_vld_out),
    .ack_out(src_TREADY_int_regslice),
    .apdone_blk(regslice_both_src_V_user_V_U_apdone_blk)
);

AirLight_regslice_both #(
    .DataWidth( 1 ))
regslice_both_src_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(src_TLAST),
    .vld_in(src_TVALID),
    .ack_in(regslice_both_src_V_last_V_U_ack_in),
    .data_out(src_TLAST_int_regslice),
    .vld_out(regslice_both_src_V_last_V_U_vld_out),
    .ack_out(src_TREADY_int_regslice),
    .apdone_blk(regslice_both_src_V_last_V_U_apdone_blk)
);

AirLight_regslice_both #(
    .DataWidth( 1 ))
regslice_both_src_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(src_TID),
    .vld_in(src_TVALID),
    .ack_in(regslice_both_src_V_id_V_U_ack_in),
    .data_out(src_TID_int_regslice),
    .vld_out(regslice_both_src_V_id_V_U_vld_out),
    .ack_out(src_TREADY_int_regslice),
    .apdone_blk(regslice_both_src_V_id_V_U_apdone_blk)
);

AirLight_regslice_both #(
    .DataWidth( 1 ))
regslice_both_src_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(src_TDEST),
    .vld_in(src_TVALID),
    .ack_in(regslice_both_src_V_dest_V_U_ack_in),
    .data_out(src_TDEST_int_regslice),
    .vld_out(regslice_both_src_V_dest_V_U_vld_out),
    .ack_out(src_TREADY_int_regslice),
    .apdone_blk(regslice_both_src_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b0 == ap_block_pp3_stage2_subdone) & (1'b1 == ap_CS_fsm_pp3_stage2)))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state32) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state32)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state32);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp5_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp7_stage0_subdone) & (1'b1 == ap_condition_pp7_exit_iter0_state79) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
            ap_enable_reg_pp7_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state78)) begin
            ap_enable_reg_pp7_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp7_exit_iter0_state79)) begin
                ap_enable_reg_pp7_iter1 <= (1'b1 ^ ap_condition_pp7_exit_iter0_state79);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter3 <= ap_enable_reg_pp7_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter4 <= ap_enable_reg_pp7_iter3;
        end else if ((1'b1 == ap_CS_fsm_state78)) begin
            ap_enable_reg_pp7_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp9_stage0_subdone) & (1'b1 == ap_condition_pp9_exit_iter0_state126) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
            ap_enable_reg_pp9_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state125)) begin
            ap_enable_reg_pp9_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp9_exit_iter0_state126)) begin
                ap_enable_reg_pp9_iter1 <= (1'b1 ^ ap_condition_pp9_exit_iter0_state126);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter2 <= ap_enable_reg_pp9_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter3 <= ap_enable_reg_pp9_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter4 <= ap_enable_reg_pp9_iter3;
        end else if ((1'b1 == ap_CS_fsm_state125)) begin
            ap_enable_reg_pp9_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b0 == B_A_1_vld_reg) & (1'b1 == B_A_1_vld_in))) begin
        B_A_1_vld_reg <= 1'b1;
    end else if (((1'b0 == B_A_1_vld_in) & (1'b1 == 1'b1) & (1'b1 == B_A_1_vld_reg))) begin
        B_A_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b0 == G_A_1_vld_reg) & (1'b1 == G_A_1_vld_in))) begin
        G_A_1_vld_reg <= 1'b1;
    end else if (((1'b0 == G_A_1_vld_in) & (1'b1 == 1'b1) & (1'b1 == G_A_1_vld_reg))) begin
        G_A_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b0 == R_A_1_vld_reg) & (1'b1 == R_A_1_vld_in))) begin
        R_A_1_vld_reg <= 1'b1;
    end else if (((1'b0 == R_A_1_vld_in) & (1'b1 == 1'b1) & (1'b1 == R_A_1_vld_reg))) begin
        R_A_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_49_reg_320 <= 9'd0;
    end else if (((exitcond16226_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_49_reg_320 <= empty_50_fu_520_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        empty_52_reg_331 <= 9'd0;
    end else if (((exitcond16125_fu_543_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        empty_52_reg_331 <= empty_53_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond16327_fu_509_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_reg_309 <= empty_47_fu_503_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_309 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_934_p2 == 1'd0) & (tmp_3_reg_1271 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
        i_1_reg_399 <= add_ln40_fu_938_p2;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        i_1_reg_399 <= 9'd255;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_1002_p2 == 1'd0) & (tmp_4_reg_1339 == 1'd0) & (1'b1 == ap_CS_fsm_state124))) begin
        i_2_reg_445 <= add_ln51_fu_1006_p2;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        i_2_reg_445 <= 9'd255;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_866_p2 == 1'd0) & (tmp_2_reg_1203 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        i_reg_353 <= add_ln29_fu_870_p2;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        i_reg_353 <= 9'd255;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        j_1_reg_377 <= zext_ln34_fu_880_p1;
    end else if (((ap_enable_reg_pp5_iter0 == 1'b1) & (icmp_ln34_fu_884_p2 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        j_1_reg_377 <= add_ln34_fu_894_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        j_3_reg_423 <= zext_ln45_fu_948_p1;
    end else if (((ap_enable_reg_pp7_iter0 == 1'b1) & (icmp_ln45_fu_952_p2 == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        j_3_reg_423 <= add_ln45_fu_962_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        j_5_reg_469 <= zext_ln56_fu_1016_p1;
    end else if (((ap_enable_reg_pp9_iter0 == 1'b1) & (icmp_ln56_fu_1020_p2 == 1'd0) & (1'b0 == ap_block_pp9_stage0_11001) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        j_5_reg_469 <= add_ln56_fu_1030_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        reuse_addr_reg34_fu_140 <= 64'd18446744073709551615;
    end else if (((1'b0 == ap_block_pp3_stage1_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        reuse_addr_reg34_fu_140 <= zext_ln534_1_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        reuse_addr_reg40_fu_132 <= 64'd18446744073709551615;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        reuse_addr_reg40_fu_132 <= zext_ln534_fu_584_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        reuse_addr_reg_fu_148 <= 64'd18446744073709551615;
    end else if (((1'b0 == ap_block_pp3_stage2_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2))) begin
        reuse_addr_reg_fu_148 <= zext_ln534_2_fu_662_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        reuse_reg33_fu_144 <= 32'd0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        reuse_reg33_fu_144 <= add_ln22_reg_1143;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        reuse_reg39_fu_136 <= 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage2_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2))) begin
        reuse_reg39_fu_136 <= add_ln20_reg_1127;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        reuse_reg_fu_152 <= 32'd0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        reuse_reg_fu_152 <= add_ln24_reg_1163;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        size_reg_342 <= 32'd0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (pixIn_last_V_reg_1149 == 1'd0) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        size_reg_342 <= size_1_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_866_p2 == 1'd0) & (tmp_2_reg_1203 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        totalB_reg_365 <= totalB_1_reg_1212;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        totalB_reg_365 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        totalB_w_reg_387 <= 32'd0;
    end else if (((ap_enable_reg_pp5_iter4 == 1'b1) & (icmp_ln34_reg_1232_pp5_iter3_reg == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        totalB_w_reg_387 <= totalB_w_1_fu_904_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_934_p2 == 1'd0) & (tmp_3_reg_1271 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
        totalG_reg_411 <= totalG_1_reg_1280;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        totalG_reg_411 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        totalG_w_reg_433 <= 32'd0;
    end else if (((ap_enable_reg_pp7_iter4 == 1'b1) & (icmp_ln45_reg_1300_pp7_iter3_reg == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        totalG_w_reg_433 <= totalG_w_1_fu_972_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_1002_p2 == 1'd0) & (tmp_4_reg_1339 == 1'd0) & (1'b1 == ap_CS_fsm_state124))) begin
        totalR_reg_457 <= totalR_1_reg_1348;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        totalR_reg_457 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        totalR_w_reg_479 <= 32'd0;
    end else if (((ap_enable_reg_pp9_iter4 == 1'b1) & (icmp_ln56_reg_1368_pp9_iter3_reg == 1'd0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        totalR_w_reg_479 <= totalR_w_1_fu_1040_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == 1'b1) & (1'b1 == B_A_1_vld_in) & (1'b1 == B_A_1_vld_reg)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b0 == B_A_1_vld_reg) & (1'b1 == B_A_1_vld_in)))) begin
        B_A_1_data_reg <= grp_fu_909_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == 1'b1) & (1'b1 == G_A_1_vld_in) & (1'b1 == G_A_1_vld_reg)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b0 == G_A_1_vld_reg) & (1'b1 == G_A_1_vld_in)))) begin
        G_A_1_data_reg <= grp_fu_977_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == 1'b1) & (1'b1 == R_A_1_vld_in) & (1'b1 == R_A_1_vld_reg)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b0 == R_A_1_vld_reg) & (1'b1 == R_A_1_vld_in)))) begin
        R_A_1_data_reg <= grp_fu_1045_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        add_ln20_reg_1127 <= add_ln20_fu_613_p2;
        addr_cmp37_reg_1138 <= addr_cmp37_fu_627_p2;
        dictG_addr_1_reg_1133 <= zext_ln534_1_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage2_11001) & (1'b1 == ap_CS_fsm_pp3_stage2))) begin
        add_ln22_reg_1143 <= add_ln22_fu_652_p2;
        addr_cmp_reg_1158 <= addr_cmp_fu_670_p2;
        dictR_addr_1_reg_1153 <= zext_ln534_2_fu_662_p1;
        pixIn_last_V_reg_1149 <= src_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln24_reg_1163 <= add_ln24_fu_695_p2;
        addr_cmp43_reg_1122 <= addr_cmp43_fu_592_p2;
        dictB_addr_1_reg_1117 <= zext_ln534_fu_584_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        conv_reg_1175 <= grp_fu_496_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        dc_reg_1180 <= grp_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b1) & (icmp_ln34_reg_1232 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        dictB_load_2_reg_1251 <= dictB_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp7_iter1 == 1'b1) & (icmp_ln45_reg_1300 == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        dictG_load_2_reg_1319 <= dictG_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp9_iter1 == 1'b1) & (icmp_ln56_reg_1368 == 1'd0) & (1'b0 == ap_block_pp9_stage0_11001) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        dictR_load_2_reg_1387 <= dictR_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln34_reg_1232 <= icmp_ln34_fu_884_p2;
        icmp_ln34_reg_1232_pp5_iter1_reg <= icmp_ln34_reg_1232;
        trunc_ln35_reg_1241_pp5_iter1_reg <= trunc_ln35_reg_1241;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp5_stage0_11001)) begin
        icmp_ln34_reg_1232_pp5_iter2_reg <= icmp_ln34_reg_1232_pp5_iter1_reg;
        icmp_ln34_reg_1232_pp5_iter3_reg <= icmp_ln34_reg_1232_pp5_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        icmp_ln45_reg_1300 <= icmp_ln45_fu_952_p2;
        icmp_ln45_reg_1300_pp7_iter1_reg <= icmp_ln45_reg_1300;
        trunc_ln46_reg_1309_pp7_iter1_reg <= trunc_ln46_reg_1309;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp7_stage0_11001)) begin
        icmp_ln45_reg_1300_pp7_iter2_reg <= icmp_ln45_reg_1300_pp7_iter1_reg;
        icmp_ln45_reg_1300_pp7_iter3_reg <= icmp_ln45_reg_1300_pp7_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        icmp_ln56_reg_1368 <= icmp_ln56_fu_1020_p2;
        icmp_ln56_reg_1368_pp9_iter1_reg <= icmp_ln56_reg_1368;
        trunc_ln57_reg_1377_pp9_iter1_reg <= trunc_ln57_reg_1377;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp9_stage0_11001)) begin
        icmp_ln56_reg_1368_pp9_iter2_reg <= icmp_ln56_reg_1368_pp9_iter1_reg;
        icmp_ln56_reg_1368_pp9_iter3_reg <= icmp_ln56_reg_1368_pp9_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_1232_pp5_iter2_reg == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        mul_ln35_reg_1256 <= grp_fu_900_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_1300_pp7_iter2_reg == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        mul_ln46_reg_1324 <= grp_fu_968_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_reg_1368_pp9_iter2_reg == 1'd0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        mul_ln57_reg_1392 <= grp_fu_1036_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        p_Result_s_reg_1185 <= data_V_fu_711_p1[32'd63];
        val_reg_1190 <= val_fu_828_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        result_V_reg_1196 <= result_V_fu_841_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        size_1_reg_1169 <= size_1_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_2_reg_1203 <= i_reg_353[32'd8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        tmp_3_reg_1271 <= i_1_reg_399[32'd8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state122)) begin
        tmp_4_reg_1339 <= i_2_reg_445[32'd8];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_1203 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        totalB_1_reg_1212 <= totalB_1_fu_860_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_1271 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
        totalG_1_reg_1280 <= totalG_1_fu_928_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_reg_1339 == 1'd0) & (1'b1 == ap_CS_fsm_state123))) begin
        totalR_1_reg_1348 <= totalR_1_fu_996_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_884_p2 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        trunc_ln35_reg_1241 <= trunc_ln35_fu_890_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_952_p2 == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        trunc_ln46_reg_1309 <= trunc_ln46_fu_958_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_fu_1020_p2 == 1'd0) & (1'b0 == ap_block_pp9_stage0_11001) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        trunc_ln57_reg_1377 <= trunc_ln57_fu_1026_p1;
    end
end

always @ (*) begin
    if (((1'b0 == B_A_1_vld_reg) | ((1'b1 == 1'b1) & (1'b1 == B_A_1_vld_reg)))) begin
        B_A_1_ack_in = 1'b1;
    end else begin
        B_A_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        B_A_1_vld_in = 1'b1;
    end else begin
        B_A_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == G_A_1_vld_reg) | ((1'b1 == 1'b1) & (1'b1 == G_A_1_vld_reg)))) begin
        G_A_1_ack_in = 1'b1;
    end else begin
        G_A_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        G_A_1_vld_in = 1'b1;
    end else begin
        G_A_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == R_A_1_vld_reg) | ((1'b1 == 1'b1) & (1'b1 == R_A_1_vld_reg)))) begin
        R_A_1_ack_in = 1'b1;
    end else begin
        R_A_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state166)) begin
        R_A_1_vld_in = 1'b1;
    end else begin
        R_A_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((pixIn_last_V_fu_658_p1 == 1'd1) & (1'b0 == ap_block_pp3_stage2_subdone) & (1'b1 == ap_CS_fsm_pp3_stage2))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln34_fu_884_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state32 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state32 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_fu_952_p2 == 1'd1)) begin
        ap_condition_pp7_exit_iter0_state79 = 1'b1;
    end else begin
        ap_condition_pp7_exit_iter0_state79 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln56_fu_1020_p2 == 1'd1)) begin
        ap_condition_pp9_exit_iter0_state126 = 1'b1;
    end else begin
        ap_condition_pp9_exit_iter0_state126 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == R_A_1_ack_in) | (1'b0 == G_A_1_ack_in) | (1'b0 == B_A_1_ack_in)) & (1'b1 == ap_CS_fsm_state167))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter3 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter4 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter3 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b0) & (ap_enable_reg_pp7_iter4 == 1'b0) & (ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter0 == 1'b0))) begin
        ap_idle_pp7 = 1'b1;
    end else begin
        ap_idle_pp7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter3 == 1'b0) & (ap_enable_reg_pp9_iter2 == 1'b0) & (ap_enable_reg_pp9_iter4 == 1'b0) & (ap_enable_reg_pp9_iter1 == 1'b0) & (ap_enable_reg_pp9_iter0 == 1'b0))) begin
        ap_idle_pp9 = 1'b1;
    end else begin
        ap_idle_pp9 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == R_A_1_ack_in) | (1'b0 == G_A_1_ack_in) | (1'b0 == B_A_1_ack_in)) & (1'b1 == ap_CS_fsm_state167))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        dictB_address0 = j_1_reg_377;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        dictB_address0 = zext_ln29_fu_855_p1;
    end else if (((1'b0 == ap_block_pp3_stage2) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2))) begin
        dictB_address0 = dictB_addr_1_reg_1117;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        dictB_address0 = zext_ln534_fu_584_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dictB_address0 = p_cast_fu_515_p1;
    end else begin
        dictB_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp3_stage2_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        dictB_ce0 = 1'b1;
    end else begin
        dictB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage2) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2))) begin
        dictB_d0 = add_ln20_reg_1127;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dictB_d0 = 32'd0;
    end else begin
        dictB_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond16327_fu_509_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_pp3_stage2_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2)))) begin
        dictB_we0 = 1'b1;
    end else begin
        dictB_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        dictG_address0 = j_3_reg_423;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        dictG_address0 = zext_ln40_fu_923_p1;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        dictG_address0 = dictG_addr_1_reg_1133;
    end else if (((1'b0 == ap_block_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        dictG_address0 = zext_ln534_1_fu_619_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dictG_address0 = p_cast1_fu_532_p1;
    end else begin
        dictG_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state4) | ((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp3_stage1_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1)))) begin
        dictG_ce0 = 1'b1;
    end else begin
        dictG_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        dictG_d0 = add_ln22_reg_1143;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dictG_d0 = 32'd0;
    end else begin
        dictG_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond16226_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        dictG_we0 = 1'b1;
    end else begin
        dictG_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter0 == 1'b1) & (1'b0 == ap_block_pp9_stage0) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        dictR_address0 = j_5_reg_469;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        dictR_address0 = zext_ln51_fu_991_p1;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        dictR_address0 = dictR_addr_1_reg_1153;
    end else if (((1'b0 == ap_block_pp3_stage2) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2))) begin
        dictR_address0 = zext_ln534_2_fu_662_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dictR_address0 = p_cast2_fu_549_p1;
    end else begin
        dictR_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state6) | ((ap_enable_reg_pp9_iter0 == 1'b1) & (1'b0 == ap_block_pp9_stage0_11001) & (1'b1 == ap_CS_fsm_pp9_stage0)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b0 == ap_block_pp3_stage2_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2)))) begin
        dictR_ce0 = 1'b1;
    end else begin
        dictR_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        dictR_d0 = add_ln24_reg_1163;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dictR_d0 = 32'd0;
    end else begin
        dictR_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond16125_fu_543_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1)))) begin
        dictR_we0 = 1'b1;
    end else begin
        dictR_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state131)) begin
        grp_fu_1045_ap_start = 1'b1;
    end else begin
        grp_fu_1045_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_909_ap_start = 1'b1;
    end else begin
        grp_fu_909_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_977_ap_start = 1'b1;
    end else begin
        grp_fu_977_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage2) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2)) | ((1'b0 == ap_block_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        src_TDATA_blk_n = src_TVALID_int_regslice;
    end else begin
        src_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage2_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2)) | ((1'b0 == ap_block_pp3_stage1_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        src_TREADY_int_regslice = 1'b1;
    end else begin
        src_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond16327_fu_509_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond16226_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond16125_fu_543_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage1)) & (1'b0 == ap_block_pp3_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_pp3_stage2 : begin
            if ((1'b0 == ap_block_pp3_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((icmp_ln33_fu_866_p2 == 1'd0) & (tmp_2_reg_1203 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else if (((tmp_2_reg_1203 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (icmp_ln34_fu_884_p2 == 1'd1) & (1'b0 == ap_block_pp5_stage0_subdone)) & ~((ap_enable_reg_pp5_iter3 == 1'b0) & (ap_enable_reg_pp5_iter4 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter3 == 1'b0) & (ap_enable_reg_pp5_iter4 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) | ((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (icmp_ln34_fu_884_p2 == 1'd1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((icmp_ln44_fu_934_p2 == 1'd0) & (tmp_3_reg_1271 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else if (((tmp_3_reg_1271 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_pp7_stage0;
        end
        ap_ST_fsm_pp7_stage0 : begin
            if ((~((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (icmp_ln45_fu_952_p2 == 1'd1) & (1'b0 == ap_block_pp7_stage0_subdone)) & ~((ap_enable_reg_pp7_iter3 == 1'b0) & (ap_enable_reg_pp7_iter4 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if ((((ap_enable_reg_pp7_iter3 == 1'b0) & (ap_enable_reg_pp7_iter4 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)) | ((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (icmp_ln45_fu_952_p2 == 1'd1) & (1'b0 == ap_block_pp7_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            if (((icmp_ln55_fu_1002_p2 == 1'd0) & (tmp_4_reg_1339 == 1'd0) & (1'b1 == ap_CS_fsm_state124))) begin
                ap_NS_fsm = ap_ST_fsm_state122;
            end else if (((tmp_4_reg_1339 == 1'd1) & (1'b1 == ap_CS_fsm_state124))) begin
                ap_NS_fsm = ap_ST_fsm_state168;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state125;
            end
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_pp9_stage0;
        end
        ap_ST_fsm_pp9_stage0 : begin
            if ((~((ap_enable_reg_pp9_iter1 == 1'b0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (icmp_ln56_fu_1020_p2 == 1'd1) & (1'b0 == ap_block_pp9_stage0_subdone)) & ~((ap_enable_reg_pp9_iter3 == 1'b0) & (ap_enable_reg_pp9_iter4 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end else if ((((ap_enable_reg_pp9_iter3 == 1'b0) & (ap_enable_reg_pp9_iter4 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone)) | ((ap_enable_reg_pp9_iter1 == 1'b0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (icmp_ln56_fu_1020_p2 == 1'd1) & (1'b0 == ap_block_pp9_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            if ((~((1'b0 == R_A_1_ack_in) | (1'b0 == G_A_1_ack_in) | (1'b0 == B_A_1_ack_in)) & (1'b1 == ap_CS_fsm_state167))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state167;
            end
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_A = B_A_1_data_reg;

assign B_A_ap_vld = B_A_1_vld_reg;

assign G_A = G_A_1_data_reg;

assign G_A_ap_vld = G_A_1_vld_reg;

assign R_A = R_A_1_data_reg;

assign R_A_ap_vld = R_A_1_vld_reg;

assign add_ln20_fu_613_p2 = (reuse_select44_fu_606_p3 + 32'd1);

assign add_ln22_fu_652_p2 = (reuse_select38_fu_645_p3 + 32'd1);

assign add_ln24_fu_695_p2 = (reuse_select_fu_688_p3 + 32'd1);

assign add_ln29_fu_870_p2 = ($signed(i_reg_353) + $signed(9'd511));

assign add_ln34_fu_894_p2 = (j_1_reg_377 + 64'd1);

assign add_ln40_fu_938_p2 = ($signed(i_1_reg_399) + $signed(9'd511));

assign add_ln45_fu_962_p2 = (j_3_reg_423 + 64'd1);

assign add_ln510_fu_754_p2 = ($signed(zext_ln510_fu_750_p1) + $signed(12'd3073));

assign add_ln51_fu_1006_p2 = ($signed(i_2_reg_445) + $signed(9'd511));

assign add_ln56_fu_1030_p2 = (j_5_reg_469 + 64'd1);

assign addr_cmp37_fu_627_p2 = ((reuse_addr_reg34_fu_140 == zext_ln534_1_fu_619_p1) ? 1'b1 : 1'b0);

assign addr_cmp43_fu_592_p2 = ((reuse_addr_reg40_fu_132 == zext_ln534_fu_584_p1) ? 1'b1 : 1'b0);

assign addr_cmp_fu_670_p2 = ((reuse_addr_reg_fu_148 == zext_ln534_2_fu_662_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp3_stage2 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp7_stage0 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_pp9_stage0 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state166 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state167 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd73];

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((ap_enable_reg_pp3_iter0 == 1'b1) & (src_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((ap_enable_reg_pp3_iter0 == 1'b1) & (src_TVALID_int_regslice == 1'b0));
end

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage1_11001 = ((ap_enable_reg_pp3_iter0 == 1'b1) & (src_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp3_stage1_subdone = ((ap_enable_reg_pp3_iter0 == 1'b1) & (src_TVALID_int_regslice == 1'b0));
end

assign ap_block_pp3_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage2_11001 = ((ap_enable_reg_pp3_iter0 == 1'b1) & (src_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp3_stage2_subdone = ((ap_enable_reg_pp3_iter0 == 1'b1) & (src_TVALID_int_regslice == 1'b0));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_pp3_stage2_iter0 = (src_TVALID_int_regslice == 1'b0);
end

assign ap_block_state11_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state126_pp9_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state127_pp9_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state128_pp9_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state129_pp9_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state130_pp9_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state167 = ((1'b0 == R_A_1_ack_in) | (1'b0 == G_A_1_ack_in) | (1'b0 == B_A_1_ack_in));
end

assign ap_block_state32_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp5_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp5_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp7_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp7_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp7_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp7_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp7_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp3_stage0_iter0 = (src_TVALID_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state9_pp3_stage1_iter0 = (src_TVALID_int_regslice == 1'b0);
end

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp7 = (ap_idle_pp7 ^ 1'b1);

assign ap_enable_pp9 = (ap_idle_pp9 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_V_fu_711_p1 = dc_reg_1180;

assign empty_47_fu_503_p2 = (empty_reg_309 + 9'd1);

assign empty_50_fu_520_p2 = (empty_49_reg_320 + 9'd1);

assign empty_53_fu_537_p2 = (empty_52_reg_331 + 9'd1);

assign exitcond16125_fu_543_p2 = ((empty_52_reg_331 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond16226_fu_526_p2 = ((empty_49_reg_320 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond16327_fu_509_p2 = ((empty_reg_309 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_866_p2 = (($signed(totalB_1_reg_1212) > $signed(result_V_reg_1196)) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_884_p2 = ((j_1_reg_377 == 64'd256) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_934_p2 = (($signed(totalG_1_reg_1280) > $signed(result_V_reg_1196)) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_952_p2 = ((j_3_reg_423 == 64'd256) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_1002_p2 = (($signed(totalR_1_reg_1348) > $signed(result_V_reg_1196)) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_1020_p2 = ((j_5_reg_469 == 64'd256) ? 1'b1 : 1'b0);

assign isNeg_fu_760_p3 = add_ln510_fu_754_p2[32'd11];

assign mantissa_fu_736_p4 = {{{{1'd1}, {tmp_6_fu_732_p1}}}, {1'd0}};

assign p_cast1_fu_532_p1 = empty_49_reg_320;

assign p_cast2_fu_549_p1 = empty_52_reg_331;

assign p_cast_fu_515_p1 = empty_reg_309;

assign pixIn_last_V_fu_658_p1 = src_TLAST_int_regslice;

assign r_V_1_fu_800_p2 = zext_ln15_fu_746_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_790_p1;

assign r_V_fu_794_p2 = zext_ln15_fu_746_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_790_p1;

assign result_V_2_fu_836_p2 = (32'd0 - val_reg_1190);

assign result_V_fu_841_p3 = ((p_Result_s_reg_1185[0:0] == 1'b1) ? result_V_2_fu_836_p2 : val_reg_1190);

assign reuse_select38_fu_645_p3 = ((addr_cmp37_reg_1138[0:0] == 1'b1) ? reuse_reg33_fu_144 : dictG_q0);

assign reuse_select44_fu_606_p3 = ((addr_cmp43_reg_1122[0:0] == 1'b1) ? reuse_reg39_fu_136 : dictB_q0);

assign reuse_select_fu_688_p3 = ((addr_cmp_reg_1158[0:0] == 1'b1) ? reuse_reg_fu_152 : dictR_q0);

assign sext_ln1311_fu_774_p1 = $signed(sub_ln1311_fu_768_p2);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_790_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_786_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_786_p1 = $signed(ush_fu_778_p3);

assign size_1_fu_701_p2 = (size_reg_342 + 32'd1);

assign src_TREADY = regslice_both_src_V_data_V_U_ack_in;

assign sub_ln1311_fu_768_p2 = (11'd1023 - tmp_5_fu_722_p4);

assign tmp_1_fu_818_p4 = {{r_V_1_fu_800_p2[84:53]}};

assign tmp_5_fu_722_p4 = {{data_V_fu_711_p1[62:52]}};

assign tmp_6_fu_732_p1 = data_V_fu_711_p1[51:0];

assign tmp_fu_806_p3 = r_V_fu_794_p2[32'd53];

assign totalB_1_fu_860_p2 = (dictB_q0 + totalB_reg_365);

assign totalB_w_1_fu_904_p2 = (mul_ln35_reg_1256 + totalB_w_reg_387);

assign totalG_1_fu_928_p2 = (dictG_q0 + totalG_reg_411);

assign totalG_w_1_fu_972_p2 = (mul_ln46_reg_1324 + totalG_w_reg_433);

assign totalR_1_fu_996_p2 = (dictR_q0 + totalR_reg_457);

assign totalR_w_1_fu_1040_p2 = (mul_ln57_reg_1392 + totalR_w_reg_479);

assign trunc_ln34_fu_876_p1 = i_reg_353[7:0];

assign trunc_ln35_fu_890_p1 = j_1_reg_377[31:0];

assign trunc_ln45_fu_944_p1 = i_1_reg_399[7:0];

assign trunc_ln46_fu_958_p1 = j_3_reg_423[31:0];

assign trunc_ln56_fu_1012_p1 = i_2_reg_445[7:0];

assign trunc_ln57_fu_1026_p1 = j_5_reg_469[31:0];

assign ush_fu_778_p3 = ((isNeg_fu_760_p3[0:0] == 1'b1) ? sext_ln1311_fu_774_p1 : add_ln510_fu_754_p2);

assign val_fu_828_p3 = ((isNeg_fu_760_p3[0:0] == 1'b1) ? zext_ln662_fu_814_p1 : tmp_1_fu_818_p4);

assign zext_ln15_fu_746_p1 = mantissa_fu_736_p4;

assign zext_ln29_fu_855_p1 = i_reg_353;

assign zext_ln34_fu_880_p1 = trunc_ln34_fu_876_p1;

assign zext_ln40_fu_923_p1 = i_1_reg_399;

assign zext_ln45_fu_948_p1 = trunc_ln45_fu_944_p1;

assign zext_ln510_fu_750_p1 = tmp_5_fu_722_p4;

assign zext_ln51_fu_991_p1 = i_2_reg_445;

assign zext_ln534_1_fu_619_p1 = src_TDATA_int_regslice;

assign zext_ln534_2_fu_662_p1 = src_TDATA_int_regslice;

assign zext_ln534_fu_584_p1 = src_TDATA_int_regslice;

assign zext_ln56_fu_1016_p1 = trunc_ln56_fu_1012_p1;

assign zext_ln662_fu_814_p1 = tmp_fu_806_p3;

endmodule //AirLight
