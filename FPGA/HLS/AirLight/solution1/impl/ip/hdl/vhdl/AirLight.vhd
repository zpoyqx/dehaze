-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AirLight is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    src_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    src_TVALID : IN STD_LOGIC;
    src_TREADY : OUT STD_LOGIC;
    src_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    B_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_A_ap_vld : OUT STD_LOGIC;
    G_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_A_ap_vld : OUT STD_LOGIC;
    R_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    R_A_ap_vld : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of AirLight is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AirLight_AirLight,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.948083,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=4206,HLS_SYN_LUT=5035,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp3_stage1 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp3_stage2 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp9_stage0 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state154 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state155 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state156 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state157 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state158 : STD_LOGIC_VECTOR (153 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state159 : STD_LOGIC_VECTOR (153 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state160 : STD_LOGIC_VECTOR (153 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state161 : STD_LOGIC_VECTOR (153 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state162 : STD_LOGIC_VECTOR (153 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state163 : STD_LOGIC_VECTOR (153 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state164 : STD_LOGIC_VECTOR (153 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state165 : STD_LOGIC_VECTOR (153 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state166 : STD_LOGIC_VECTOR (153 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state167 : STD_LOGIC_VECTOR (153 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state168 : STD_LOGIC_VECTOR (153 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_3FA999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111110101001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv64_100 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (153 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal B_A_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal B_A_1_vld_reg : STD_LOGIC := '0';
    signal B_A_1_vld_in : STD_LOGIC;
    signal B_A_1_ack_in : STD_LOGIC;
    signal G_A_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal G_A_1_vld_reg : STD_LOGIC := '0';
    signal G_A_1_vld_in : STD_LOGIC;
    signal G_A_1_ack_in : STD_LOGIC;
    signal R_A_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal R_A_1_vld_reg : STD_LOGIC := '0';
    signal R_A_1_vld_in : STD_LOGIC;
    signal R_A_1_ack_in : STD_LOGIC;
    signal src_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage1 : signal is "none";
    signal ap_block_pp3_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage2 : signal is "none";
    signal ap_block_pp3_stage2 : BOOLEAN;
    signal size_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_377 : STD_LOGIC_VECTOR (63 downto 0);
    signal totalB_w_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_423 : STD_LOGIC_VECTOR (63 downto 0);
    signal totalG_w_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_5_reg_469 : STD_LOGIC_VECTOR (63 downto 0);
    signal totalR_w_reg_479 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_47_fu_503_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_50_fu_520_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal empty_53_fu_537_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal dictB_addr_1_reg_1117 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state8_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal addr_cmp43_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp43_reg_1122 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_reg_1127 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state9_pp3_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp3_stage1_iter1 : BOOLEAN;
    signal ap_block_pp3_stage1_11001 : BOOLEAN;
    signal dictG_addr_1_reg_1133 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_cmp37_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp37_reg_1138 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_fu_652_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_reg_1143 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10_pp3_stage2_iter0 : BOOLEAN;
    signal ap_block_pp3_stage2_11001 : BOOLEAN;
    signal pixIn_last_V_fu_658_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixIn_last_V_reg_1149 : STD_LOGIC_VECTOR (0 downto 0);
    signal dictR_addr_1_reg_1153 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_cmp_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_1158 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_fu_695_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_reg_1163 : STD_LOGIC_VECTOR (31 downto 0);
    signal size_1_fu_701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal size_1_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal grp_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_reg_1175 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_491_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_1180 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal p_Result_s_reg_1185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal val_fu_828_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_1190 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_fu_841_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_1196 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_2_reg_1203 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal totalB_1_fu_860_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal totalB_1_reg_1212 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal add_ln29_fu_870_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln33_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln34_fu_880_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal icmp_ln34_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_1232 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state32_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state33_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state34_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state35_pp5_stage0_iter3 : BOOLEAN;
    signal ap_block_state36_pp5_stage0_iter4 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln34_reg_1232_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_1232_pp5_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_1232_pp5_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln35_fu_890_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln35_reg_1241 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln35_reg_1241_pp5_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_fu_894_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal dictB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dictB_load_2_reg_1251 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal grp_fu_900_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_reg_1256 : STD_LOGIC_VECTOR (31 downto 0);
    signal totalB_w_1_fu_904_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter4 : STD_LOGIC := '0';
    signal grp_fu_909_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal tmp_3_reg_1271 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal totalG_1_fu_928_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal totalG_1_reg_1280 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal add_ln40_fu_938_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal icmp_ln44_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln45_fu_948_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal icmp_ln45_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1300 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_block_state79_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state80_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state81_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_state82_pp7_stage0_iter3 : BOOLEAN;
    signal ap_block_state83_pp7_stage0_iter4 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal icmp_ln45_reg_1300_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1300_pp7_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_1300_pp7_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln46_fu_958_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln46_reg_1309 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln46_reg_1309_pp7_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln45_fu_962_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal dictG_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dictG_load_2_reg_1319 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal grp_fu_968_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_reg_1324 : STD_LOGIC_VECTOR (31 downto 0);
    signal totalG_w_1_fu_972_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp7_iter4 : STD_LOGIC := '0';
    signal grp_fu_977_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal tmp_4_reg_1339 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal totalR_1_fu_996_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal totalR_1_reg_1348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal add_ln51_fu_1006_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal icmp_ln55_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln56_fu_1016_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal icmp_ln56_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1368 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp9_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp9_stage0 : signal is "none";
    signal ap_block_state126_pp9_stage0_iter0 : BOOLEAN;
    signal ap_block_state127_pp9_stage0_iter1 : BOOLEAN;
    signal ap_block_state128_pp9_stage0_iter2 : BOOLEAN;
    signal ap_block_state129_pp9_stage0_iter3 : BOOLEAN;
    signal ap_block_state130_pp9_stage0_iter4 : BOOLEAN;
    signal ap_block_pp9_stage0_11001 : BOOLEAN;
    signal icmp_ln56_reg_1368_pp9_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1368_pp9_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1368_pp9_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln57_fu_1026_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln57_reg_1377 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln57_reg_1377_pp9_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln56_fu_1030_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp9_iter0 : STD_LOGIC := '0';
    signal dictR_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dictR_load_2_reg_1387 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp9_iter1 : STD_LOGIC := '0';
    signal grp_fu_1036_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln57_reg_1392 : STD_LOGIC_VECTOR (31 downto 0);
    signal totalR_w_1_fu_1040_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp9_iter4 : STD_LOGIC := '0';
    signal grp_fu_1045_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state166 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state166 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp3_stage2_subdone : BOOLEAN;
    signal ap_condition_pp3_flush_enable : STD_LOGIC;
    signal ap_block_pp3_stage1_subdone : BOOLEAN;
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state32 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter3 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state79 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter3 : STD_LOGIC := '0';
    signal ap_block_pp9_stage0_subdone : BOOLEAN;
    signal ap_condition_pp9_exit_iter0_state126 : STD_LOGIC;
    signal ap_enable_reg_pp9_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp9_iter3 : STD_LOGIC := '0';
    signal dictB_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dictB_ce0 : STD_LOGIC;
    signal dictB_we0 : STD_LOGIC;
    signal dictB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dictG_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dictG_ce0 : STD_LOGIC;
    signal dictG_we0 : STD_LOGIC;
    signal dictG_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dictR_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dictR_ce0 : STD_LOGIC;
    signal dictR_we0 : STD_LOGIC;
    signal dictR_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_309 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond16327_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_49_reg_320 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond16226_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_52_reg_331 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond16125_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_reg_353 : STD_LOGIC_VECTOR (8 downto 0);
    signal totalB_reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_399 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal totalG_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_445 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal totalR_reg_457 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast1_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast2_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_1_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_2_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_855_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal zext_ln40_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal zext_ln51_fu_991_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp9_stage0 : BOOLEAN;
    signal reuse_addr_reg40_fu_132 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg39_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg34_fu_140 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg33_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg_fu_148 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reuse_select44_fu_606_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select38_fu_645_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select_fu_688_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_732_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_736_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_5_fu_722_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln510_fu_750_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_754_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_768_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_760_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_774_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_778_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_786_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_746_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_790_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_794_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_fu_806_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_800_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_fu_814_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_818_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_2_fu_836_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln34_fu_876_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal trunc_ln45_fu_944_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal trunc_ln56_fu_1012_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal grp_fu_909_ap_start : STD_LOGIC;
    signal grp_fu_909_ap_done : STD_LOGIC;
    signal grp_fu_977_ap_start : STD_LOGIC;
    signal grp_fu_977_ap_done : STD_LOGIC;
    signal grp_fu_1045_ap_start : STD_LOGIC;
    signal grp_fu_1045_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state167 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state167 : signal is "none";
    signal ap_block_state167 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (153 downto 0);
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp9 : STD_LOGIC;
    signal ap_enable_pp9 : STD_LOGIC;
    signal regslice_both_src_V_data_V_U_apdone_blk : STD_LOGIC;
    signal src_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal src_TVALID_int_regslice : STD_LOGIC;
    signal src_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_src_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal src_TKEEP_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal src_TSTRB_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_user_V_U_apdone_blk : STD_LOGIC;
    signal src_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_last_V_U_apdone_blk : STD_LOGIC;
    signal src_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_id_V_U_apdone_blk : STD_LOGIC;
    signal src_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal src_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component AirLight_dmul_64ns_64ns_64_7_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component AirLight_sitodp_32ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component AirLight_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AirLight_sdiv_32ns_32ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AirLight_dictB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AirLight_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component AirLight_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component AirLight_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    dictB_U : component AirLight_dictB
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dictB_address0,
        ce0 => dictB_ce0,
        we0 => dictB_we0,
        d0 => dictB_d0,
        q0 => dictB_q0);

    dictG_U : component AirLight_dictB
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dictG_address0,
        ce0 => dictG_ce0,
        we0 => dictG_we0,
        d0 => dictG_d0,
        q0 => dictG_q0);

    dictR_U : component AirLight_dictB
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dictR_address0,
        ce0 => dictR_ce0,
        we0 => dictR_we0,
        d0 => dictR_d0,
        q0 => dictR_q0);

    dmul_64ns_64ns_64_7_max_dsp_1_U1 : component AirLight_dmul_64ns_64ns_64_7_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => conv_reg_1175,
        din1 => ap_const_lv64_3FA999999999999A,
        ce => ap_const_logic_1,
        dout => grp_fu_491_p2);

    sitodp_32ns_64_6_no_dsp_1_U2 : component AirLight_sitodp_32ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => size_1_reg_1169,
        ce => ap_const_logic_1,
        dout => grp_fu_496_p1);

    mul_32s_32s_32_2_1_U3 : component AirLight_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => dictB_load_2_reg_1251,
        din1 => trunc_ln35_reg_1241_pp5_iter1_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_900_p2);

    sdiv_32ns_32ns_32_36_seq_1_U4 : component AirLight_sdiv_32ns_32ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_909_ap_start,
        done => grp_fu_909_ap_done,
        din0 => totalB_w_reg_387,
        din1 => totalB_1_reg_1212,
        ce => ap_const_logic_1,
        dout => grp_fu_909_p2);

    mul_32s_32s_32_2_1_U5 : component AirLight_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => dictG_load_2_reg_1319,
        din1 => trunc_ln46_reg_1309_pp7_iter1_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_968_p2);

    sdiv_32ns_32ns_32_36_seq_1_U6 : component AirLight_sdiv_32ns_32ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_977_ap_start,
        done => grp_fu_977_ap_done,
        din0 => totalG_w_reg_433,
        din1 => totalG_1_reg_1280,
        ce => ap_const_logic_1,
        dout => grp_fu_977_p2);

    mul_32s_32s_32_2_1_U7 : component AirLight_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => dictR_load_2_reg_1387,
        din1 => trunc_ln57_reg_1377_pp9_iter1_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_1036_p2);

    sdiv_32ns_32ns_32_36_seq_1_U8 : component AirLight_sdiv_32ns_32ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1045_ap_start,
        done => grp_fu_1045_ap_done,
        din0 => totalR_w_reg_479,
        din1 => totalR_1_reg_1348,
        ce => ap_const_logic_1,
        dout => grp_fu_1045_p2);

    regslice_both_src_V_data_V_U : component AirLight_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TDATA,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_data_V_U_ack_in,
        data_out => src_TDATA_int_regslice,
        vld_out => src_TVALID_int_regslice,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_data_V_U_apdone_blk);

    regslice_both_src_V_keep_V_U : component AirLight_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TKEEP,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_keep_V_U_ack_in,
        data_out => src_TKEEP_int_regslice,
        vld_out => regslice_both_src_V_keep_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_keep_V_U_apdone_blk);

    regslice_both_src_V_strb_V_U : component AirLight_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TSTRB,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_strb_V_U_ack_in,
        data_out => src_TSTRB_int_regslice,
        vld_out => regslice_both_src_V_strb_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_strb_V_U_apdone_blk);

    regslice_both_src_V_user_V_U : component AirLight_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TUSER,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_user_V_U_ack_in,
        data_out => src_TUSER_int_regslice,
        vld_out => regslice_both_src_V_user_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_user_V_U_apdone_blk);

    regslice_both_src_V_last_V_U : component AirLight_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TLAST,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_last_V_U_ack_in,
        data_out => src_TLAST_int_regslice,
        vld_out => regslice_both_src_V_last_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_last_V_U_apdone_blk);

    regslice_both_src_V_id_V_U : component AirLight_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TID,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_id_V_U_ack_in,
        data_out => src_TID_int_regslice,
        vld_out => regslice_both_src_V_id_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_id_V_U_apdone_blk);

    regslice_both_src_V_dest_V_U : component AirLight_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TDEST,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_dest_V_U_ack_in,
        data_out => src_TDEST_int_regslice,
        vld_out => regslice_both_src_V_dest_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp3_flush_enable)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1)) or ((ap_const_boolean_0 = ap_block_pp3_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2)))) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state32) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state32)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state32);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp5_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state79) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state79)) then 
                        ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state79);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter3 <= ap_enable_reg_pp7_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter4 <= ap_enable_reg_pp7_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                    ap_enable_reg_pp7_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp9_exit_iter0_state126) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp9_exit_iter0_state126)) then 
                        ap_enable_reg_pp9_iter1 <= (ap_const_logic_1 xor ap_condition_pp9_exit_iter0_state126);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then 
                    ap_enable_reg_pp9_iter2 <= ap_enable_reg_pp9_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then 
                    ap_enable_reg_pp9_iter3 <= ap_enable_reg_pp9_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then 
                    ap_enable_reg_pp9_iter4 <= ap_enable_reg_pp9_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
                    ap_enable_reg_pp9_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    B_A_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_0 = B_A_1_vld_reg) and (ap_const_logic_1 = B_A_1_vld_in))) then 
                B_A_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_0 = B_A_1_vld_in) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = B_A_1_vld_reg))) then 
                B_A_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    G_A_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_0 = G_A_1_vld_reg) and (ap_const_logic_1 = G_A_1_vld_in))) then 
                G_A_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_0 = G_A_1_vld_in) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = G_A_1_vld_reg))) then 
                G_A_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    R_A_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_0 = R_A_1_vld_reg) and (ap_const_logic_1 = R_A_1_vld_in))) then 
                R_A_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_0 = R_A_1_vld_in) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = R_A_1_vld_reg))) then 
                R_A_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    empty_49_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                empty_49_reg_320 <= ap_const_lv9_0;
            elsif (((exitcond16226_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_49_reg_320 <= empty_50_fu_520_p2;
            end if; 
        end if;
    end process;

    empty_52_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                empty_52_reg_331 <= ap_const_lv9_0;
            elsif (((exitcond16125_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                empty_52_reg_331 <= empty_53_fu_537_p2;
            end if; 
        end if;
    end process;

    empty_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond16327_fu_509_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_309 <= empty_47_fu_503_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                empty_reg_309 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_1_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_934_p2 = ap_const_lv1_0) and (tmp_3_reg_1271 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
                i_1_reg_399 <= add_ln40_fu_938_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                i_1_reg_399 <= ap_const_lv9_FF;
            end if; 
        end if;
    end process;

    i_2_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_1002_p2 = ap_const_lv1_0) and (tmp_4_reg_1339 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state124))) then 
                i_2_reg_445 <= add_ln51_fu_1006_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
                i_2_reg_445 <= ap_const_lv9_FF;
            end if; 
        end if;
    end process;

    i_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_866_p2 = ap_const_lv1_0) and (tmp_2_reg_1203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                i_reg_353 <= add_ln29_fu_870_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_reg_353 <= ap_const_lv9_FF;
            end if; 
        end if;
    end process;

    j_1_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                j_1_reg_377 <= zext_ln34_fu_880_p1;
            elsif (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln34_fu_884_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                j_1_reg_377 <= add_ln34_fu_894_p2;
            end if; 
        end if;
    end process;

    j_3_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                j_3_reg_423 <= zext_ln45_fu_948_p1;
            elsif (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (icmp_ln45_fu_952_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                j_3_reg_423 <= add_ln45_fu_962_p2;
            end if; 
        end if;
    end process;

    j_5_reg_469_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
                j_5_reg_469 <= zext_ln56_fu_1016_p1;
            elsif (((ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (icmp_ln56_fu_1020_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then 
                j_5_reg_469 <= add_ln56_fu_1030_p2;
            end if; 
        end if;
    end process;

    reuse_addr_reg34_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reuse_addr_reg34_fu_140 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
                reuse_addr_reg34_fu_140 <= zext_ln534_1_fu_619_p1;
            end if; 
        end if;
    end process;

    reuse_addr_reg40_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reuse_addr_reg40_fu_132 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                reuse_addr_reg40_fu_132 <= zext_ln534_fu_584_p1;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reuse_addr_reg_fu_148 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2))) then 
                reuse_addr_reg_fu_148 <= zext_ln534_2_fu_662_p1;
            end if; 
        end if;
    end process;

    reuse_reg33_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reuse_reg33_fu_144 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                reuse_reg33_fu_144 <= add_ln22_reg_1143;
            end if; 
        end if;
    end process;

    reuse_reg39_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reuse_reg39_fu_136 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2))) then 
                reuse_reg39_fu_136 <= add_ln20_reg_1127;
            end if; 
        end if;
    end process;

    reuse_reg_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reuse_reg_fu_152 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
                reuse_reg_fu_152 <= add_ln24_reg_1163;
            end if; 
        end if;
    end process;

    size_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                size_reg_342 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (pixIn_last_V_reg_1149 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
                size_reg_342 <= size_1_fu_701_p2;
            end if; 
        end if;
    end process;

    totalB_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_866_p2 = ap_const_lv1_0) and (tmp_2_reg_1203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                totalB_reg_365 <= totalB_1_reg_1212;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                totalB_reg_365 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    totalB_w_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                totalB_w_reg_387 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp5_iter4 = ap_const_logic_1) and (icmp_ln34_reg_1232_pp5_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                totalB_w_reg_387 <= totalB_w_1_fu_904_p2;
            end if; 
        end if;
    end process;

    totalG_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_934_p2 = ap_const_lv1_0) and (tmp_3_reg_1271 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
                totalG_reg_411 <= totalG_1_reg_1280;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                totalG_reg_411 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    totalG_w_reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                totalG_w_reg_433 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (icmp_ln45_reg_1300_pp7_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
                totalG_w_reg_433 <= totalG_w_1_fu_972_p2;
            end if; 
        end if;
    end process;

    totalR_reg_457_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_1002_p2 = ap_const_lv1_0) and (tmp_4_reg_1339 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state124))) then 
                totalR_reg_457 <= totalR_1_reg_1348;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
                totalR_reg_457 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    totalR_w_reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
                totalR_w_reg_479 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp9_iter4 = ap_const_logic_1) and (icmp_ln56_reg_1368_pp9_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then 
                totalR_w_reg_479 <= totalR_w_1_fu_1040_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = B_A_1_vld_in) and (ap_const_logic_1 = B_A_1_vld_reg)) or (not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_0 = B_A_1_vld_reg) and (ap_const_logic_1 = B_A_1_vld_in)))) then
                B_A_1_data_reg <= grp_fu_909_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = G_A_1_vld_in) and (ap_const_logic_1 = G_A_1_vld_reg)) or (not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_0 = G_A_1_vld_reg) and (ap_const_logic_1 = G_A_1_vld_in)))) then
                G_A_1_data_reg <= grp_fu_977_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = R_A_1_vld_in) and (ap_const_logic_1 = R_A_1_vld_reg)) or (not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_0 = R_A_1_vld_reg) and (ap_const_logic_1 = R_A_1_vld_in)))) then
                R_A_1_data_reg <= grp_fu_1045_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then
                add_ln20_reg_1127 <= add_ln20_fu_613_p2;
                addr_cmp37_reg_1138 <= addr_cmp37_fu_627_p2;
                dictG_addr_1_reg_1133 <= zext_ln534_1_fu_619_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2))) then
                add_ln22_reg_1143 <= add_ln22_fu_652_p2;
                addr_cmp_reg_1158 <= addr_cmp_fu_670_p2;
                dictR_addr_1_reg_1153 <= zext_ln534_2_fu_662_p1(8 - 1 downto 0);
                pixIn_last_V_reg_1149 <= src_TLAST_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                add_ln24_reg_1163 <= add_ln24_fu_695_p2;
                addr_cmp43_reg_1122 <= addr_cmp43_fu_592_p2;
                dictB_addr_1_reg_1117 <= zext_ln534_fu_584_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                conv_reg_1175 <= grp_fu_496_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                dc_reg_1180 <= grp_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln34_reg_1232 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                dictB_load_2_reg_1251 <= dictB_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (icmp_ln45_reg_1300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                dictG_load_2_reg_1319 <= dictG_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (icmp_ln56_reg_1368 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                dictR_load_2_reg_1387 <= dictR_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln34_reg_1232 <= icmp_ln34_fu_884_p2;
                icmp_ln34_reg_1232_pp5_iter1_reg <= icmp_ln34_reg_1232;
                trunc_ln35_reg_1241_pp5_iter1_reg <= trunc_ln35_reg_1241;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp5_stage0_11001)) then
                icmp_ln34_reg_1232_pp5_iter2_reg <= icmp_ln34_reg_1232_pp5_iter1_reg;
                icmp_ln34_reg_1232_pp5_iter3_reg <= icmp_ln34_reg_1232_pp5_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                icmp_ln45_reg_1300 <= icmp_ln45_fu_952_p2;
                icmp_ln45_reg_1300_pp7_iter1_reg <= icmp_ln45_reg_1300;
                trunc_ln46_reg_1309_pp7_iter1_reg <= trunc_ln46_reg_1309;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp7_stage0_11001)) then
                icmp_ln45_reg_1300_pp7_iter2_reg <= icmp_ln45_reg_1300_pp7_iter1_reg;
                icmp_ln45_reg_1300_pp7_iter3_reg <= icmp_ln45_reg_1300_pp7_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                icmp_ln56_reg_1368 <= icmp_ln56_fu_1020_p2;
                icmp_ln56_reg_1368_pp9_iter1_reg <= icmp_ln56_reg_1368;
                trunc_ln57_reg_1377_pp9_iter1_reg <= trunc_ln57_reg_1377;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp9_stage0_11001)) then
                icmp_ln56_reg_1368_pp9_iter2_reg <= icmp_ln56_reg_1368_pp9_iter1_reg;
                icmp_ln56_reg_1368_pp9_iter3_reg <= icmp_ln56_reg_1368_pp9_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_1232_pp5_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                mul_ln35_reg_1256 <= grp_fu_900_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_1300_pp7_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                mul_ln46_reg_1324 <= grp_fu_968_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1368_pp9_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then
                mul_ln57_reg_1392 <= grp_fu_1036_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                p_Result_s_reg_1185 <= data_V_fu_711_p1(63 downto 63);
                val_reg_1190 <= val_fu_828_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                result_V_reg_1196 <= result_V_fu_841_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then
                size_1_reg_1169 <= size_1_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_2_reg_1203 <= i_reg_353(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                tmp_3_reg_1271 <= i_1_reg_399(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state122)) then
                tmp_4_reg_1339 <= i_2_reg_445(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_reg_1203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                totalB_1_reg_1212 <= totalB_1_fu_860_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_reg_1271 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                totalG_1_reg_1280 <= totalG_1_fu_928_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_reg_1339 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state123))) then
                totalR_1_reg_1348 <= totalR_1_fu_996_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_884_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                trunc_ln35_reg_1241 <= trunc_ln35_fu_890_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_952_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                trunc_ln46_reg_1309 <= trunc_ln46_fu_958_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_1020_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                trunc_ln57_reg_1377 <= trunc_ln57_fu_1026_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, B_A_1_ack_in, G_A_1_ack_in, R_A_1_ack_in, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_enable_reg_pp3_iter1, tmp_2_reg_1203, ap_CS_fsm_state30, icmp_ln33_fu_866_p2, icmp_ln34_fu_884_p2, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter4, tmp_3_reg_1271, ap_CS_fsm_state77, icmp_ln44_fu_934_p2, icmp_ln45_fu_952_p2, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter4, tmp_4_reg_1339, ap_CS_fsm_state124, icmp_ln55_fu_1002_p2, icmp_ln56_fu_1020_p2, ap_enable_reg_pp9_iter0, ap_enable_reg_pp9_iter1, ap_enable_reg_pp9_iter4, ap_block_pp3_stage2_subdone, ap_block_pp3_stage1_subdone, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter3, ap_block_pp7_stage0_subdone, ap_enable_reg_pp7_iter3, ap_block_pp9_stage0_subdone, ap_enable_reg_pp9_iter3, exitcond16327_fu_509_p2, exitcond16226_fu_526_p2, exitcond16125_fu_543_p2, ap_CS_fsm_state167, ap_block_pp3_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond16327_fu_509_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond16226_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((exitcond16125_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage1 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) and (ap_const_boolean_0 = ap_block_pp3_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                end if;
            when ap_ST_fsm_pp3_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((icmp_ln33_fu_866_p2 = ap_const_lv1_0) and (tmp_2_reg_1203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                elsif (((tmp_2_reg_1203 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln34_fu_884_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) and not(((ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln34_fu_884_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                if (((icmp_ln44_fu_934_p2 = ap_const_lv1_0) and (tmp_3_reg_1271 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                elsif (((tmp_3_reg_1271 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    ap_NS_fsm <= ap_ST_fsm_state121;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (icmp_ln45_fu_952_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) and not(((ap_enable_reg_pp7_iter3 = ap_const_logic_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif ((((ap_enable_reg_pp7_iter3 = ap_const_logic_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) or ((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (icmp_ln45_fu_952_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                if (((icmp_ln55_fu_1002_p2 = ap_const_lv1_0) and (tmp_4_reg_1339 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state124))) then
                    ap_NS_fsm <= ap_ST_fsm_state122;
                elsif (((tmp_4_reg_1339 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state124))) then
                    ap_NS_fsm <= ap_ST_fsm_state168;
                else
                    ap_NS_fsm <= ap_ST_fsm_state125;
                end if;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
            when ap_ST_fsm_pp9_stage0 => 
                if ((not(((ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (icmp_ln56_fu_1020_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))) and not(((ap_enable_reg_pp9_iter3 = ap_const_logic_0) and (ap_enable_reg_pp9_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                elsif ((((ap_enable_reg_pp9_iter3 = ap_const_logic_0) and (ap_enable_reg_pp9_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) or ((ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (icmp_ln56_fu_1020_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state131;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                end if;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                ap_NS_fsm <= ap_ST_fsm_state150;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state151 => 
                ap_NS_fsm <= ap_ST_fsm_state152;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                ap_NS_fsm <= ap_ST_fsm_state154;
            when ap_ST_fsm_state154 => 
                ap_NS_fsm <= ap_ST_fsm_state155;
            when ap_ST_fsm_state155 => 
                ap_NS_fsm <= ap_ST_fsm_state156;
            when ap_ST_fsm_state156 => 
                ap_NS_fsm <= ap_ST_fsm_state157;
            when ap_ST_fsm_state157 => 
                ap_NS_fsm <= ap_ST_fsm_state158;
            when ap_ST_fsm_state158 => 
                ap_NS_fsm <= ap_ST_fsm_state159;
            when ap_ST_fsm_state159 => 
                ap_NS_fsm <= ap_ST_fsm_state160;
            when ap_ST_fsm_state160 => 
                ap_NS_fsm <= ap_ST_fsm_state161;
            when ap_ST_fsm_state161 => 
                ap_NS_fsm <= ap_ST_fsm_state162;
            when ap_ST_fsm_state162 => 
                ap_NS_fsm <= ap_ST_fsm_state163;
            when ap_ST_fsm_state163 => 
                ap_NS_fsm <= ap_ST_fsm_state164;
            when ap_ST_fsm_state164 => 
                ap_NS_fsm <= ap_ST_fsm_state165;
            when ap_ST_fsm_state165 => 
                ap_NS_fsm <= ap_ST_fsm_state166;
            when ap_ST_fsm_state166 => 
                ap_NS_fsm <= ap_ST_fsm_state167;
            when ap_ST_fsm_state167 => 
                if ((not(((ap_const_logic_0 = R_A_1_ack_in) or (ap_const_logic_0 = G_A_1_ack_in) or (ap_const_logic_0 = B_A_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state167))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state167;
                end if;
            when ap_ST_fsm_state168 => 
                ap_NS_fsm <= ap_ST_fsm_state167;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    B_A <= B_A_1_data_reg;

    B_A_1_ack_in_assign_proc : process(B_A_1_vld_reg)
    begin
        if (((ap_const_logic_0 = B_A_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = B_A_1_vld_reg)))) then 
            B_A_1_ack_in <= ap_const_logic_1;
        else 
            B_A_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    B_A_1_vld_in_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            B_A_1_vld_in <= ap_const_logic_1;
        else 
            B_A_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    B_A_ap_vld <= B_A_1_vld_reg;
    G_A <= G_A_1_data_reg;

    G_A_1_ack_in_assign_proc : process(G_A_1_vld_reg)
    begin
        if (((ap_const_logic_0 = G_A_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = G_A_1_vld_reg)))) then 
            G_A_1_ack_in <= ap_const_logic_1;
        else 
            G_A_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    G_A_1_vld_in_assign_proc : process(ap_CS_fsm_state119)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            G_A_1_vld_in <= ap_const_logic_1;
        else 
            G_A_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    G_A_ap_vld <= G_A_1_vld_reg;
    R_A <= R_A_1_data_reg;

    R_A_1_ack_in_assign_proc : process(R_A_1_vld_reg)
    begin
        if (((ap_const_logic_0 = R_A_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = R_A_1_vld_reg)))) then 
            R_A_1_ack_in <= ap_const_logic_1;
        else 
            R_A_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    R_A_1_vld_in_assign_proc : process(ap_CS_fsm_state166)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state166)) then 
            R_A_1_vld_in <= ap_const_logic_1;
        else 
            R_A_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    R_A_ap_vld <= R_A_1_vld_reg;
    add_ln20_fu_613_p2 <= std_logic_vector(unsigned(reuse_select44_fu_606_p3) + unsigned(ap_const_lv32_1));
    add_ln22_fu_652_p2 <= std_logic_vector(unsigned(reuse_select38_fu_645_p3) + unsigned(ap_const_lv32_1));
    add_ln24_fu_695_p2 <= std_logic_vector(unsigned(reuse_select_fu_688_p3) + unsigned(ap_const_lv32_1));
    add_ln29_fu_870_p2 <= std_logic_vector(unsigned(i_reg_353) + unsigned(ap_const_lv9_1FF));
    add_ln34_fu_894_p2 <= std_logic_vector(unsigned(j_1_reg_377) + unsigned(ap_const_lv64_1));
    add_ln40_fu_938_p2 <= std_logic_vector(unsigned(i_1_reg_399) + unsigned(ap_const_lv9_1FF));
    add_ln45_fu_962_p2 <= std_logic_vector(unsigned(j_3_reg_423) + unsigned(ap_const_lv64_1));
    add_ln510_fu_754_p2 <= std_logic_vector(unsigned(zext_ln510_fu_750_p1) + unsigned(ap_const_lv12_C01));
    add_ln51_fu_1006_p2 <= std_logic_vector(unsigned(i_2_reg_445) + unsigned(ap_const_lv9_1FF));
    add_ln56_fu_1030_p2 <= std_logic_vector(unsigned(j_5_reg_469) + unsigned(ap_const_lv64_1));
    addr_cmp37_fu_627_p2 <= "1" when (reuse_addr_reg34_fu_140 = zext_ln534_1_fu_619_p1) else "0";
    addr_cmp43_fu_592_p2 <= "1" when (reuse_addr_reg40_fu_132 = zext_ln534_fu_584_p1) else "0";
    addr_cmp_fu_670_p2 <= "1" when (reuse_addr_reg_fu_148 = zext_ln534_2_fu_662_p1) else "0";
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp3_stage1 <= ap_CS_fsm(8);
    ap_CS_fsm_pp3_stage2 <= ap_CS_fsm(9);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(29);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(72);
    ap_CS_fsm_pp9_stage0 <= ap_CS_fsm(115);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state119 <= ap_CS_fsm(108);
    ap_CS_fsm_state120 <= ap_CS_fsm(109);
    ap_CS_fsm_state122 <= ap_CS_fsm(111);
    ap_CS_fsm_state123 <= ap_CS_fsm(112);
    ap_CS_fsm_state124 <= ap_CS_fsm(113);
    ap_CS_fsm_state125 <= ap_CS_fsm(114);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state131 <= ap_CS_fsm(116);
    ap_CS_fsm_state166 <= ap_CS_fsm(151);
    ap_CS_fsm_state167 <= ap_CS_fsm(152);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(23);
    ap_CS_fsm_state27 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(27);
    ap_CS_fsm_state31 <= ap_CS_fsm(28);
    ap_CS_fsm_state37 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state72 <= ap_CS_fsm(65);
    ap_CS_fsm_state73 <= ap_CS_fsm(66);
    ap_CS_fsm_state75 <= ap_CS_fsm(68);
    ap_CS_fsm_state76 <= ap_CS_fsm(69);
    ap_CS_fsm_state77 <= ap_CS_fsm(70);
    ap_CS_fsm_state78 <= ap_CS_fsm(71);
    ap_CS_fsm_state84 <= ap_CS_fsm(73);
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter0, src_TVALID_int_regslice)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (src_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, src_TVALID_int_regslice)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (src_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_pp3_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage1_11001_assign_proc : process(ap_enable_reg_pp3_iter0, src_TVALID_int_regslice)
    begin
                ap_block_pp3_stage1_11001 <= ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (src_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_pp3_stage1_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, src_TVALID_int_regslice)
    begin
                ap_block_pp3_stage1_subdone <= ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (src_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_pp3_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage2_11001_assign_proc : process(ap_enable_reg_pp3_iter0, src_TVALID_int_regslice)
    begin
                ap_block_pp3_stage2_11001 <= ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (src_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_pp3_stage2_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, src_TVALID_int_regslice)
    begin
                ap_block_pp3_stage2_subdone <= ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (src_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state10_pp3_stage2_iter0_assign_proc : process(src_TVALID_int_regslice)
    begin
                ap_block_state10_pp3_stage2_iter0 <= (src_TVALID_int_regslice = ap_const_logic_0);
    end process;

        ap_block_state11_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state126_pp9_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state127_pp9_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state128_pp9_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state129_pp9_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp3_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state130_pp9_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state167_assign_proc : process(B_A_1_ack_in, G_A_1_ack_in, R_A_1_ack_in)
    begin
                ap_block_state167 <= ((ap_const_logic_0 = R_A_1_ack_in) or (ap_const_logic_0 = G_A_1_ack_in) or (ap_const_logic_0 = B_A_1_ack_in));
    end process;

        ap_block_state32_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp5_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp5_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp7_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp7_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp3_stage0_iter0_assign_proc : process(src_TVALID_int_regslice)
    begin
                ap_block_state8_pp3_stage0_iter0 <= (src_TVALID_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state9_pp3_stage1_iter0_assign_proc : process(src_TVALID_int_regslice)
    begin
                ap_block_state9_pp3_stage1_iter0 <= (src_TVALID_int_regslice = ap_const_logic_0);
    end process;


    ap_condition_pp3_flush_enable_assign_proc : process(ap_CS_fsm_pp3_stage2, pixIn_last_V_fu_658_p1, ap_block_pp3_stage2_subdone)
    begin
        if (((pixIn_last_V_fu_658_p1 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2))) then 
            ap_condition_pp3_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp3_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state32_assign_proc : process(icmp_ln34_fu_884_p2)
    begin
        if ((icmp_ln34_fu_884_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state32 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state79_assign_proc : process(icmp_ln45_fu_952_p2)
    begin
        if ((icmp_ln45_fu_952_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state79 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state79 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp9_exit_iter0_state126_assign_proc : process(icmp_ln56_fu_1020_p2)
    begin
        if ((icmp_ln56_fu_1020_p2 = ap_const_lv1_1)) then 
            ap_condition_pp9_exit_iter0_state126 <= ap_const_logic_1;
        else 
            ap_condition_pp9_exit_iter0_state126 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(B_A_1_ack_in, G_A_1_ack_in, R_A_1_ack_in, ap_CS_fsm_state167)
    begin
        if ((not(((ap_const_logic_0 = R_A_1_ack_in) or (ap_const_logic_0 = G_A_1_ack_in) or (ap_const_logic_0 = B_A_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state167))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp9 <= (ap_idle_pp9 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter4, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter3)
    begin
        if (((ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter4, ap_enable_reg_pp7_iter2, ap_enable_reg_pp7_iter3)
    begin
        if (((ap_enable_reg_pp7_iter3 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp9_assign_proc : process(ap_enable_reg_pp9_iter0, ap_enable_reg_pp9_iter1, ap_enable_reg_pp9_iter4, ap_enable_reg_pp9_iter2, ap_enable_reg_pp9_iter3)
    begin
        if (((ap_enable_reg_pp9_iter3 = ap_const_logic_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_0) and (ap_enable_reg_pp9_iter4 = ap_const_logic_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_0))) then 
            ap_idle_pp9 <= ap_const_logic_1;
        else 
            ap_idle_pp9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(B_A_1_ack_in, G_A_1_ack_in, R_A_1_ack_in, ap_CS_fsm_state167)
    begin
        if ((not(((ap_const_logic_0 = R_A_1_ack_in) or (ap_const_logic_0 = G_A_1_ack_in) or (ap_const_logic_0 = B_A_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state167))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    data_V_fu_711_p1 <= dc_reg_1180;

    dictB_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2, j_1_reg_377, ap_CS_fsm_state2, dictB_addr_1_reg_1117, ap_CS_fsm_state28, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, p_cast_fu_515_p1, zext_ln534_fu_584_p1, zext_ln29_fu_855_p1, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            dictB_address0 <= j_1_reg_377(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dictB_address0 <= zext_ln29_fu_855_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2))) then 
            dictB_address0 <= dictB_addr_1_reg_1117;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            dictB_address0 <= zext_ln534_fu_584_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dictB_address0 <= p_cast_fu_515_p1(8 - 1 downto 0);
        else 
            dictB_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dictB_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage2, ap_CS_fsm_state2, ap_block_pp3_stage0_11001, ap_block_pp3_stage2_11001, ap_CS_fsm_state28, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            dictB_ce0 <= ap_const_logic_1;
        else 
            dictB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dictB_d0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2, ap_CS_fsm_state2, add_ln20_reg_1127)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2))) then 
            dictB_d0 <= add_ln20_reg_1127;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dictB_d0 <= ap_const_lv32_0;
        else 
            dictB_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dictB_we0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage2, ap_CS_fsm_state2, ap_block_pp3_stage2_11001, exitcond16327_fu_509_p2)
    begin
        if ((((exitcond16327_fu_509_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2)))) then 
            dictB_we0 <= ap_const_logic_1;
        else 
            dictB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dictG_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1, j_3_reg_423, ap_CS_fsm_state4, dictG_addr_1_reg_1133, ap_enable_reg_pp3_iter1, ap_CS_fsm_state75, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, p_cast1_fu_532_p1, zext_ln534_1_fu_619_p1, zext_ln40_fu_923_p1, ap_block_pp7_stage0)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            dictG_address0 <= j_3_reg_423(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            dictG_address0 <= zext_ln40_fu_923_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            dictG_address0 <= dictG_addr_1_reg_1133;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
            dictG_address0 <= zext_ln534_1_fu_619_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dictG_address0 <= p_cast1_fu_532_p1(8 - 1 downto 0);
        else 
            dictG_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dictG_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage1, ap_CS_fsm_state4, ap_block_pp3_stage0_11001, ap_block_pp3_stage1_11001, ap_enable_reg_pp3_iter1, ap_CS_fsm_state75, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1)))) then 
            dictG_ce0 <= ap_const_logic_1;
        else 
            dictG_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dictG_d0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, ap_CS_fsm_state4, add_ln22_reg_1143, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            dictG_d0 <= add_ln22_reg_1143;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dictG_d0 <= ap_const_lv32_0;
        else 
            dictG_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dictG_we0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_CS_fsm_state4, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1, exitcond16226_fu_526_p2)
    begin
        if ((((exitcond16226_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            dictG_we0 <= ap_const_logic_1;
        else 
            dictG_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dictR_address0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2, j_5_reg_469, ap_CS_fsm_state6, dictR_addr_1_reg_1153, ap_enable_reg_pp3_iter1, ap_CS_fsm_state122, ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter0, p_cast2_fu_549_p1, zext_ln534_2_fu_662_p1, zext_ln51_fu_991_p1, ap_block_pp9_stage0)
    begin
        if (((ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then 
            dictR_address0 <= j_5_reg_469(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state122)) then 
            dictR_address0 <= zext_ln51_fu_991_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
            dictR_address0 <= dictR_addr_1_reg_1153;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2))) then 
            dictR_address0 <= zext_ln534_2_fu_662_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dictR_address0 <= p_cast2_fu_549_p1(8 - 1 downto 0);
        else 
            dictR_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dictR_ce0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage1, ap_CS_fsm_pp3_stage2, ap_CS_fsm_state6, ap_block_pp3_stage1_11001, ap_block_pp3_stage2_11001, ap_enable_reg_pp3_iter1, ap_CS_fsm_state122, ap_CS_fsm_pp9_stage0, ap_block_pp9_stage0_11001, ap_enable_reg_pp9_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1)) or ((ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2)))) then 
            dictR_ce0 <= ap_const_logic_1;
        else 
            dictR_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dictR_d0_assign_proc : process(ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1, ap_CS_fsm_state6, add_ln24_reg_1163, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
            dictR_d0 <= add_ln24_reg_1163;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dictR_d0 <= ap_const_lv32_0;
        else 
            dictR_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dictR_we0_assign_proc : process(ap_CS_fsm_pp3_stage1, ap_CS_fsm_state6, ap_block_pp3_stage1_11001, ap_enable_reg_pp3_iter1, exitcond16125_fu_543_p2)
    begin
        if ((((exitcond16125_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1)))) then 
            dictR_we0 <= ap_const_logic_1;
        else 
            dictR_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_47_fu_503_p2 <= std_logic_vector(unsigned(empty_reg_309) + unsigned(ap_const_lv9_1));
    empty_50_fu_520_p2 <= std_logic_vector(unsigned(empty_49_reg_320) + unsigned(ap_const_lv9_1));
    empty_53_fu_537_p2 <= std_logic_vector(unsigned(empty_52_reg_331) + unsigned(ap_const_lv9_1));
    exitcond16125_fu_543_p2 <= "1" when (empty_52_reg_331 = ap_const_lv9_100) else "0";
    exitcond16226_fu_526_p2 <= "1" when (empty_49_reg_320 = ap_const_lv9_100) else "0";
    exitcond16327_fu_509_p2 <= "1" when (empty_reg_309 = ap_const_lv9_100) else "0";

    grp_fu_1045_ap_start_assign_proc : process(ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            grp_fu_1045_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1045_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_909_ap_start_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_909_ap_start <= ap_const_logic_1;
        else 
            grp_fu_909_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_977_ap_start_assign_proc : process(ap_CS_fsm_state84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_fu_977_ap_start <= ap_const_logic_1;
        else 
            grp_fu_977_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln33_fu_866_p2 <= "1" when (signed(totalB_1_reg_1212) > signed(result_V_reg_1196)) else "0";
    icmp_ln34_fu_884_p2 <= "1" when (j_1_reg_377 = ap_const_lv64_100) else "0";
    icmp_ln44_fu_934_p2 <= "1" when (signed(totalG_1_reg_1280) > signed(result_V_reg_1196)) else "0";
    icmp_ln45_fu_952_p2 <= "1" when (j_3_reg_423 = ap_const_lv64_100) else "0";
    icmp_ln55_fu_1002_p2 <= "1" when (signed(totalR_1_reg_1348) > signed(result_V_reg_1196)) else "0";
    icmp_ln56_fu_1020_p2 <= "1" when (j_5_reg_469 = ap_const_lv64_100) else "0";
    isNeg_fu_760_p3 <= add_ln510_fu_754_p2(11 downto 11);
    mantissa_fu_736_p4 <= ((ap_const_lv1_1 & tmp_6_fu_732_p1) & ap_const_lv1_0);
    p_cast1_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_49_reg_320),64));
    p_cast2_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_52_reg_331),64));
    p_cast_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_309),64));
    pixIn_last_V_fu_658_p1 <= src_TLAST_int_regslice;
    r_V_1_fu_800_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_746_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_790_p1(31-1 downto 0)))));
    r_V_fu_794_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_746_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_790_p1(31-1 downto 0)))));
    result_V_2_fu_836_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_reg_1190));
    result_V_fu_841_p3 <= 
        result_V_2_fu_836_p2 when (p_Result_s_reg_1185(0) = '1') else 
        val_reg_1190;
    reuse_select38_fu_645_p3 <= 
        reuse_reg33_fu_144 when (addr_cmp37_reg_1138(0) = '1') else 
        dictG_q0;
    reuse_select44_fu_606_p3 <= 
        reuse_reg39_fu_136 when (addr_cmp43_reg_1122(0) = '1') else 
        dictB_q0;
    reuse_select_fu_688_p3 <= 
        reuse_reg_fu_152 when (addr_cmp_reg_1158(0) = '1') else 
        dictR_q0;
        sext_ln1311_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_768_p2),12));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_786_p1),137));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_778_p3),32));

    size_1_fu_701_p2 <= std_logic_vector(unsigned(size_reg_342) + unsigned(ap_const_lv32_1));

    src_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2, src_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2)) or ((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            src_TDATA_blk_n <= src_TVALID_int_regslice;
        else 
            src_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    src_TREADY <= regslice_both_src_V_data_V_U_ack_in;

    src_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage1, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage0_11001, ap_block_pp3_stage1_11001, ap_block_pp3_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            src_TREADY_int_regslice <= ap_const_logic_1;
        else 
            src_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1311_fu_768_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_5_fu_722_p4));
    tmp_1_fu_818_p4 <= r_V_1_fu_800_p2(84 downto 53);
    tmp_5_fu_722_p4 <= data_V_fu_711_p1(62 downto 52);
    tmp_6_fu_732_p1 <= data_V_fu_711_p1(52 - 1 downto 0);
    tmp_fu_806_p3 <= r_V_fu_794_p2(53 downto 53);
    totalB_1_fu_860_p2 <= std_logic_vector(unsigned(dictB_q0) + unsigned(totalB_reg_365));
    totalB_w_1_fu_904_p2 <= std_logic_vector(unsigned(mul_ln35_reg_1256) + unsigned(totalB_w_reg_387));
    totalG_1_fu_928_p2 <= std_logic_vector(unsigned(dictG_q0) + unsigned(totalG_reg_411));
    totalG_w_1_fu_972_p2 <= std_logic_vector(unsigned(mul_ln46_reg_1324) + unsigned(totalG_w_reg_433));
    totalR_1_fu_996_p2 <= std_logic_vector(unsigned(dictR_q0) + unsigned(totalR_reg_457));
    totalR_w_1_fu_1040_p2 <= std_logic_vector(unsigned(mul_ln57_reg_1392) + unsigned(totalR_w_reg_479));
    trunc_ln34_fu_876_p1 <= i_reg_353(8 - 1 downto 0);
    trunc_ln35_fu_890_p1 <= j_1_reg_377(32 - 1 downto 0);
    trunc_ln45_fu_944_p1 <= i_1_reg_399(8 - 1 downto 0);
    trunc_ln46_fu_958_p1 <= j_3_reg_423(32 - 1 downto 0);
    trunc_ln56_fu_1012_p1 <= i_2_reg_445(8 - 1 downto 0);
    trunc_ln57_fu_1026_p1 <= j_5_reg_469(32 - 1 downto 0);
    ush_fu_778_p3 <= 
        sext_ln1311_fu_774_p1 when (isNeg_fu_760_p3(0) = '1') else 
        add_ln510_fu_754_p2;
    val_fu_828_p3 <= 
        zext_ln662_fu_814_p1 when (isNeg_fu_760_p3(0) = '1') else 
        tmp_1_fu_818_p4;
    zext_ln15_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_736_p4),137));
    zext_ln29_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_353),64));
    zext_ln34_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln34_fu_876_p1),64));
    zext_ln40_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_399),64));
    zext_ln45_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln45_fu_944_p1),64));
    zext_ln510_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_722_p4),12));
    zext_ln51_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_445),64));
    zext_ln534_1_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_TDATA_int_regslice),64));
    zext_ln534_2_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_TDATA_int_regslice),64));
    zext_ln534_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_TDATA_int_regslice),64));
    zext_ln56_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln56_fu_1012_p1),64));
    zext_ln662_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_806_p3),32));
end behav;
